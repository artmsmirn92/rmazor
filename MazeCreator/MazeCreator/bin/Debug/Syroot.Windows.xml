<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Syroot.Windows</name>
    </assembly>
    <members>
        <member name="T:Syroot.Windows.DbgHelp">
            <summary>
            Represents definitions in the Windows DbgHelp library as part of the WinAPI.
            </summary>
        </member>
        <member name="M:Syroot.Windows.DbgHelp.MiniDumpWriteDump(System.IntPtr,System.UInt32,Microsoft.Win32.SafeHandles.SafeFileHandle,Syroot.Windows.DbgHelp.MINIDUMP_TYPE,Syroot.Windows.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION@,Syroot.Windows.DbgHelp.MINIDUMP_USER_STREAM_INFORMATION@,System.IntPtr)">
            <summary>
            Writes user-mode minidump information to the specified file.
            </summary>
            <param name="hProcess">A handle to the process for which the information is to be generated.</param>
            <param name="processId">The identifier of the process for which the information is to be generated.</param>
            <param name="hFile">A handle to the file in which the information is to be written.</param>
            <param name="dumpType">The type of information to be generated.</param>
            <param name="exceptionParam">A pointer to a <see cref="T:Syroot.Windows.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION"/> structure
            describing the client exception that caused the minidump to be generated.</param>
            <param name="userStreamParam">A pointer to a <see cref="T:Syroot.Windows.DbgHelp.MINIDUMP_USER_STREAM_INFORMATION"/> structure.</param>
            <param name="callbackParam">A pointer to a MINIDUMP_CALLBACK_INFORMATION structure that specifies a callback
            routine which is to receive extended minidump information.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, the return value
            is <see langword="false"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.DbgHelp.MiniDumpWriteDump(System.IntPtr,System.UInt32,Microsoft.Win32.SafeHandles.SafeFileHandle,Syroot.Windows.DbgHelp.MINIDUMP_TYPE,Syroot.Windows.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION@,System.IntPtr,System.IntPtr)">
            <summary>
            Writes user-mode minidump information to the specified file.
            </summary>
            <param name="hProcess">A handle to the process for which the information is to be generated.</param>
            <param name="processId">The identifier of the process for which the information is to be generated.</param>
            <param name="hFile">A handle to the file in which the information is to be written.</param>
            <param name="dumpType">The type of information to be generated.</param>
            <param name="exceptionParam">A pointer to a <see cref="T:Syroot.Windows.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION"/> structure
            describing the client exception that caused the minidump to be generated.</param>
            <param name="userStreamParam">A pointer to a <see cref="T:Syroot.Windows.DbgHelp.MINIDUMP_USER_STREAM_INFORMATION"/> structure.</param>
            <param name="callbackParam">A pointer to a MINIDUMP_CALLBACK_INFORMATION structure that specifies a callback
            routine which is to receive extended minidump information.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, the return value
            is <see langword="false"/>.</returns>
        </member>
        <member name="T:Syroot.Windows.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION">
            <summary>
            Contains the exception information written to the minidump file by the MiniDumpWriteDump function.
            </summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION.ThreadId">
            <summary>The identifier of the thread throwing the exception.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION.ExceptionPointers">
            <summary>A pointer to an EXCEPTION_POINTERS structure specifying a computer-independent description of
            the exception and the processor context at the time of the exception.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION.ClientPointers">
            <summary>Determines where to get the memory regions pointed to by the ExceptionPointers member.</summary>
        </member>
        <member name="T:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE">
            <summary>
            Represents the type of a minidump data stream.
            </summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.UnusedStream">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.ReservedStream0">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.ReservedStream1">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.ThreadListStream">
            <summary>The stream contains thread information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.ModuleListStream">
            <summary>The stream contains module information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.MemoryListStream">
            <summary>The stream contains memory allocation information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.ExceptionStream">
            <summary>The stream contains exception information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.SystemInfoStream">
            <summary>The stream contains general system information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.ThreadExListStream">
            <summary>The stream contains extended thread information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.Memory64ListStream">
            <summary>The stream contains memory allocation information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.CommentStreamA">
            <summary>The stream contains an ANSI string used for documentation purposes.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.CommentStreamW">
            <summary>The stream contains a Unicode string used for documentation purposes.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.HandleDataStream">
            <summary>The stream contains high-level information about the active operating system handles.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.FunctionTableStream">
            <summary>The stream contains function table information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.UnloadedModuleListStream">
            <summary>The stream contains module information for the unloaded modules.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.MiscInfoStream">
            <summary>The stream contains miscellaneous information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.MemoryInfoListStream">
            <summary>The stream contains memory region description information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.ThreadInfoListStream">
            <summary>The stream contains thread state information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.HandleOperationListStream">
            <summary>This stream contains operation list information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_STREAM_TYPE.LastReservedStream">
            <summary>Any value greater than this value will not be used by the system and can be used to represent
            application-defined data streams.</summary>
        </member>
        <member name="T:Syroot.Windows.DbgHelp.MINIDUMP_TYPE">
            <summary>
            Identifies the type of information that will be written to the minidump file by the MiniWriteDump function.
            </summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpNormal">
            <summary>Include just the information necessary to capture stack traces for all existing threads in a
            process.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithDataSegs">
            <summary>Include the data sections from all loaded modules.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithFullMemory">
            <summary>Include all accessible memory in the process.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithHandleData">
            <summary>Include high-level information about the operating system handles that are active when the
            minidump is made.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpFilterMemory">
            <summary>Stack and backing store memory written to the minidump file should be filtered to remove all
            but the pointer values necessary to reconstruct a stack trace.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpScanMemory">
            <summary>Stack and backing store memory should be scanned for pointer references to modules in the
            module list.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithUnloadedModules">
            <summary>Include information from the list of modules that were recently unloaded, if this information
            is maintained by the operating system.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithIndirectlyReferencedMemory">
            <summary>Include pages with data referenced by locals or other stack memory.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpFilterModulePaths">
            <summary>Filter module paths for information such as user names or important directories.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithProcessThreadData">
            <summary>Include complete per-process and per-thread information from the operating system.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithPrivateReadWriteMemory">
            <summary>Scan the virtual address space for PAGE_READWRITE memory to be included.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithoutOptionalData">
            <summary>Reduce the data that is dumped by eliminating memory regions that are not essential to meet
            criteria specified for the dump.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithFullMemoryInfo">
            <summary>Include memory region information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithThreadInfo">
            <summary>Include thread state information.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithCodeSegs">
            <summary>Include all code and code-related sections from loaded modules to capture executable content.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithoutAuxiliaryState">
            <summary>Turns off secondary auxiliary-supported memory gathering.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithFullAuxiliaryState">
            <summary>Requests that auxiliary data providers include their state in the dump image; the state data
            that is included is provider dependent.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithPrivateWriteCopyMemory">
            <summary>Scans the virtual address space for PAGE_WRITECOPY memory to be included.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpIgnoreInaccessibleMemory">
            <summary>If you specify MiniDumpWithFullMemory, the MiniDumpWriteDump function will fail if the function
            cannot read the memory regions; however, if you include MiniDumpIgnoreInaccessibleMemory, the
            MiniDumpWriteDump function will ignore the memory read failures and continue to generate the dump.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithTokenInformation">
            <summary>Adds security token related data.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpWithModuleHeaders">
            <summary>Adds module header related data.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_TYPE.MiniDumpFilterTriage">
            <summary>Adds filter triage related data.</summary>
        </member>
        <member name="T:Syroot.Windows.DbgHelp.MINIDUMP_USER_STREAM">
            <summary>
            Contains user-defined information stored in a data stream.
            </summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_USER_STREAM.Type">
            <summary>The type of data stream.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_USER_STREAM.BufferSize">
            <summary>The size of the user-defined data stream buffer, in bytes.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_USER_STREAM.Buffer">
            <summary>A pointer to a buffer that contains the user-defined data stream.</summary>
        </member>
        <member name="T:Syroot.Windows.DbgHelp.MINIDUMP_USER_STREAM_INFORMATION">
            <summary>
            Contains a list of user data streams used by the MiniDumpWriteDump function.
            </summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_USER_STREAM_INFORMATION.UserStreamCount">
            <summary>The number of user streams.</summary>
        </member>
        <member name="F:Syroot.Windows.DbgHelp.MINIDUMP_USER_STREAM_INFORMATION.UserStreamArray">
            <summary>An array of MINIDUMP_USER_STREAM structures.</summary>
        </member>
        <member name="T:Syroot.Windows.Error">
            <summary>
            Represents Win32 system error codes.
            </summary>
        </member>
        <member name="F:Syroot.Windows.Error.ERROR_SUCCESS">
            <summary>The operation completed successfully.</summary>
        </member>
        <member name="T:Syroot.Windows.Gdi32">
            <summary>
            Represents definitions in the Windows Gdi32 library as part of the WinAPI.
            </summary>
        </member>
        <member name="T:Syroot.Windows.Gdi32.ABC">
            <summary>
            Contains the width of a character in a TrueType font.
            </summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.ABC.abcA">
            <summary>The A spacing of the character. The A spacing is the distance to add to the current position
            before drawing the character glyph.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.ABC.abcB">
            <summary>The B spacing of the character. The B spacing is the width of the drawn portion of the
            character glyph.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.ABC.abcC">
            <summary>The C spacing of the character. The C spacing is the distance to add to the current position to
            provide white space to the right of the character glyph.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.BkMode.TRANSPARENT">
            <summary>Background remains untouched.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.BkMode.OPAQUE">
            <summary>Background is filled with the current background color before the text, hatched brush, or pen
            is drawn.</summary>
        </member>
        <member name="T:Syroot.Windows.Gdi32.COLORREF">
            <summary>
            Represents an RGB color.
            </summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.COLORREF.Value">
            <summary>The RGBA value.</summary>
        </member>
        <member name="M:Syroot.Windows.Gdi32.COLORREF.op_Implicit(System.Drawing.Color)~Syroot.Windows.Gdi32.COLORREF">
            <summary>
            Implicitly converts a <see cref="T:System.Drawing.Color"/> to a <see cref="T:Syroot.Windows.Gdi32.COLORREF"/> instance.
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color"/> instance to convert.</param>
        </member>
        <member name="M:Syroot.Windows.Gdi32.COLORREF.op_Implicit(Syroot.Windows.Gdi32.COLORREF)~System.Drawing.Color">
            <summary>
            Implicitly converts a <see cref="T:Syroot.Windows.Gdi32.COLORREF"/> to a <see cref="T:System.Drawing.Color"/> instance.
            </summary>
            <param name="colorref">The <see cref="T:Syroot.Windows.Gdi32.COLORREF"/> instance to convert.</param>
        </member>
        <member name="M:Syroot.Windows.Gdi32.COLORREF.op_Implicit(System.Int32)~Syroot.Windows.Gdi32.COLORREF">
            <summary>
            Implicitly converts an <see cref="T:System.Int32"/> to a <see cref="T:Syroot.Windows.Gdi32.COLORREF"/> instance.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> instance to convert.</param>
        </member>
        <member name="M:Syroot.Windows.Gdi32.COLORREF.op_Implicit(Syroot.Windows.Gdi32.COLORREF)~System.Int32">
            <summary>
            Implicitly converts a <see cref="T:Syroot.Windows.Gdi32.COLORREF"/> to an <see cref="T:System.Int32"/> instance.
            </summary>
            <param name="colorref">The <see cref="T:Syroot.Windows.Gdi32.COLORREF"/> instance to convert.</param>
        </member>
        <member name="M:Syroot.Windows.Gdi32.COLORREF.op_Implicit(System.UInt32)~Syroot.Windows.Gdi32.COLORREF">
            <summary>
            Implicitly converts an <see cref="T:System.UInt32"/> to a <see cref="T:Syroot.Windows.Gdi32.COLORREF"/> instance.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> instance to convert.</param>
        </member>
        <member name="M:Syroot.Windows.Gdi32.COLORREF.op_Implicit(Syroot.Windows.Gdi32.COLORREF)~System.UInt32">
            <summary>
            Implicitly converts a <see cref="T:Syroot.Windows.Gdi32.COLORREF"/> to an <see cref="T:System.UInt32"/> instance.
            </summary>
            <param name="colorref">The <see cref="T:Syroot.Windows.Gdi32.COLORREF"/> instance to convert.</param>
        </member>
        <member name="T:Syroot.Windows.Gdi32.ExtTextOptions">
            <summary>
            Represents how to use the application-defined rectangle.
            </summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.ExtTextOptions.ETO_OPAQUE">
            <summary>The current background color should be used to fill the rectangle.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.ExtTextOptions.ETO_CLIPPED">
            <summary>The text will be clipped to the rectangle.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.ExtTextOptions.ETO_GLYPH_INDEX">
            <summary>The lpString array refers to an array returned from GetCharacterPlacement and should be parsed
            directly by GDI as no further language-specific processing is required.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.ExtTextOptions.ETO_RTLREADING">
            <summary>If this value is specified and a Hebrew or Arabic font is selected into the device context, the 
            string is output using right-to-left reading order.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.ExtTextOptions.ETO_NUMERICSLOCAL">
            <summary>To display numbers, use digits appropriate to the locale.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.ExtTextOptions.ETO_NUMERICSLATIN">
            <summary>To display numbers, use European digits.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.ExtTextOptions.ETO_IGNORELANGUAGE">
            <summary>Reserved for system use. If an application sets this flag, it loses international scripting
            support and in some cases it may display no text at all.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.ExtTextOptions.ETO_PDY">
            <summary>When this is set, the array pointed to by lpDx contains pairs of values. The first value of
            each pair is, as usual, the distance between origins of adjacent character cells, but the second value
            is the displacement along the vertical direction of the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.CLR_INVALID">
            <summary>Value indicating an invalid color.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.GDI_ERROR">
            <summary>Value indicating a generic GDI error.</summary>
        </member>
        <member name="M:Syroot.Windows.Gdi32.CreateCompatibleDC(Syroot.Windows.Gdi32.HDC)">
            <summary>
            Creates a memory device context (DC) compatible with the specified device.
            </summary>
            <param name="hdc">A handle to an existing DC.</param>
            <returns>If the function succeeds, the return value is the handle to a memory DC.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.ExtTextOut(Syroot.Windows.Gdi32.HDC,System.Int32,System.Int32,Syroot.Windows.Gdi32.ExtTextOptions,Syroot.Windows.User32.RECT@,System.String,System.UInt32,System.IntPtr)">
            <summary>
            Draws text using the currently selected font, background color, and text color. You can optionally provide
            dimensions to be used for clipping, opaquing, or both.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The x-coordinate, in logical coordinates, of the reference point used to position the
            string.</param>
            <param name="y">The y-coordinate, in logical coordinates, of the reference point used to position the
            string.</param>
            <param name="options">Specifies how to use the application-defined rectangle. This parameter can be one or
            more of <see cref="T:Syroot.Windows.Gdi32.ExtTextOptions"/>.</param>
            <param name="lprect">A pointer to an optional <see cref="T:Syroot.Windows.User32.RECT"/> structure that specifies the dimensions, in
            logical coordinates, of a rectangle that is used for clipping, opaquing, or both.</param>
            <param name="lpString">A pointer to a string that specifies the text to be drawn.</param>
            <param name="c">The length of the string pointed to by <paramref name="lpString"/>.</param>
            <param name="lpDx">A pointer to an optional array of values that indicate the distance between origins of
            adjacent character cells.</param>
            <returns>If the string is drawn, the return value is <see langword="true"/>. If the function fails, the
            return value is <see langword="false"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.GdiFlush">
            <summary>
            Flushes the calling thread's current batch.
            </summary>
            <returns>If all functions in the current batch succeed, the return value is <see langword="true"/>. If not
            all functions in the current batch succeed, the return value is <see langword="false"/>, indicating that at
            least one function returned an error.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.GetCharABCWidths(Syroot.Windows.Gdi32.HDC,System.UInt32,System.UInt32,Syroot.Windows.Gdi32.ABC@)">
            <summary>
            Retrieves the widths, in logical units, of consecutive characters in a specified range from the current
            TrueType font. This function succeeds only with TrueType fonts.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="wFirst">The first character in the group of consecutive characters from the current font.</param>
            <param name="wLast">The last character in the group of consecutive characters from the current font.</param>
            <param name="lpABC">A pointer to an array of ABC structures that receives the character widths, in logical
            units. This array must contain at least as many ABC structures as there are characters in the range
            specified by the <paramref name="wFirst"/> and <paramref name="wLast"/> parameters.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.GetPixel(Syroot.Windows.Gdi32.HDC,System.Int32,System.Int32)">
            <summary>
            Retrieves the red, green, blue (RGB) color value of the pixel at the specified coordinates.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The x-coordinate, in logical units, of the pixel to be examined.</param>
            <param name="y">The y-coordinate, in logical units, of the pixel to be examined.</param>
            <returns>The return value specifies the RGB of the pixel.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.GetStockObject(Syroot.Windows.Gdi32.StockObject)">
            <summary>
            Retrieves a handle to one of the stock pens, brushes, fonts, or palettes.
            </summary>
            <param name="i">The type of stock object.</param>
            <returns></returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.GetTextMetrics(Syroot.Windows.Gdi32.HDC,Syroot.Windows.Gdi32.TEXTMETRIC@)">
            <summary>
            Fills the specified buffer with the metrics for the currently selected font.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lptm">A pointer to the <see cref="T:Syroot.Windows.Gdi32.TEXTMETRIC"/> structure that receives the text metrics.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.GetTextMetrics(Syroot.Windows.Gdi32.HDC,Syroot.Windows.Gdi32.TEXTMETRICA@)">
            <summary>
            Fills the specified buffer with the metrics for the currently selected font.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lptm">A pointer to the <see cref="T:Syroot.Windows.Gdi32.TEXTMETRICA"/> structure that receives the text metrics.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.GetTextMetrics(Syroot.Windows.Gdi32.HDC,Syroot.Windows.Gdi32.TEXTMETRICW@)">
            <summary>
            Fills the specified buffer with the metrics for the currently selected font.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="lptm">A pointer to the <see cref="T:Syroot.Windows.Gdi32.TEXTMETRICW"/> structure that receives the text metrics.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.RGB(System.Byte,System.Byte,System.Byte)">
            <summary>
            Selects a red, green, blue (RGB) color based on the arguments supplied and the color capabilities of the
            output device.
            </summary>
            <param name="r">The intensity of the red color.</param>
            <param name="g">The intensity of the green color.</param>
            <param name="b">The intensity of the blue color.</param>
            <returns>The resulting <see cref="T:Syroot.Windows.Gdi32.COLORREF"/> value.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.SelectObject(Syroot.Windows.Gdi32.HDC,Syroot.Windows.Gdi32.HGDIOBJ)">
            <summary>
            Selects an object into the specified device context (DC). The new object replaces the previous object of the
            same type.
            </summary>
            <param name="hdc">A handle to the DC.</param>
            <param name="h">A handle to the object to be selected.</param>
            <returns>If the selected object is not a region and the function succeeds, the return value is a handle to
            the object being replaced.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.SetBkColor(Syroot.Windows.Gdi32.HDC,Syroot.Windows.Gdi32.COLORREF)">
            <summary>
            Sets the current background color to the specified color value, or to the nearest physical color if the
            device cannot represent the specified color value.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="color">The new background color.</param>
            <returns>If the function succeeds, the return value specifies the previous background color. If the function
            fails, the return value is <see cref="F:Syroot.Windows.Gdi32.CLR_INVALID"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.SetBkMode(Syroot.Windows.Gdi32.HDC,Syroot.Windows.Gdi32.BkMode)">
            <summary>
            Sets the background mix mode of the specified device context. The background mix mode is used with text,
            hatched brushes, and pen styles that are not solid lines.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="mode">The background mode.</param>
            <returns>If the function succeeds, the return value specifies the previous background mode.
            If the function fails, the return value is <c>0</c>.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.SetTextAlign(Syroot.Windows.Gdi32.HDC,Syroot.Windows.Gdi32.TextAlign)">
            <summary>
            The SetTextAlign function sets the text-alignment flags for the specified device context.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="align">The text alignment by using a mask of the values in <see cref="T:Syroot.Windows.Gdi32.TextAlign"/>.</param>
            <returns>If the function succeeds, the return value is the previous-text-alignment setting. If the function
            fails, the return value is <see cref="F:Syroot.Windows.Gdi32.GDI_ERROR"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.SetTextColor(Syroot.Windows.Gdi32.HDC,Syroot.Windows.Gdi32.COLORREF)">
            <summary>
            Sets the text color for the specified device context to the specified color.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="color">The color of the text.</param>
            <returns>If the function succeeds, the return value is a color reference for the previous text color. If the
            function fails, the return value is <see cref="F:Syroot.Windows.Gdi32.CLR_INVALID"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.Gdi32.TextOut(Syroot.Windows.Gdi32.HDC,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Writes a character string at the specified location, using the currently selected font, background color,
            and text color.
            </summary>
            <param name="hdc">A handle to the device context.</param>
            <param name="x">The x-coordinate, in logical coordinates, of the reference point that the system uses to
            align the string.</param>
            <param name="y">The y-coordinate, in logical coordinates, of the reference point that the system uses to
            align the string.</param>
            <param name="lpString">A pointer to the string to be drawn.</param>
            <param name="c">The length of the string pointed to by <paramref name="lpString"/>, in characters.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>. If the function fails, the
            return value is <see langword="false"/>.</returns>
        </member>
        <member name="T:Syroot.Windows.Gdi32.HDC">
            <summary>
            Represents a graphics device context.
            </summary>
        </member>
        <member name="T:Syroot.Windows.Gdi32.HGDIOBJ">
            <summary>
            Represents a GDI object handle.
            </summary>
        </member>
        <member name="T:Syroot.Windows.Gdi32.StockObject">
            <summary>
            Represents the types of stock objects.
            </summary>
        </member>
        <member name="T:Syroot.Windows.Gdi32.TextAlign">
            <summary>
            Represents text alignments. Only one flag can be chosen from those that affect horizontal and vertical
            alignment. In addition, only one of the two flags that alter the current position can be chosen.
            </summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TextAlign.TA_LEFT">
            <summary>The reference point will be on the left edge of the bounding rectangle.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TextAlign.TA_TOP">
            <summary>The reference point will be on the top edge of the bounding rectangle.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TextAlign.TA_UPDATECP">
            <summary>The current position is updated after each text output call. The current position is used as
            the reference point.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TextAlign.TA_RIGHT">
            <summary>The reference point will be on the right edge of the bounding rectangle.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TextAlign.TA_CENTER">
            <summary>The reference point will be aligned horizontally with the center of the bounding rectangle.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TextAlign.TA_BOTTOM">
            <summary>The reference point will be on the bottom edge of the bounding rectangle.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TextAlign.TA_BASELINE">
            <summary>The reference point will be on the base line of the text.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TextAlign.TA_RTLREADING">
            <summary>The text is laid out in right to left reading order, as opposed to the default left to right
            order.</summary>
        </member>
        <member name="T:Syroot.Windows.Gdi32.TEXTMETRIC">
            <summary>
            Represents basic information about a physical font. All sizes are specified in logical units; that is, they
            depend on the current mapping mode of the display context.
            </summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmHeight">
            <summary>The height (ascent + descent) of characters.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmAscent">
            <summary>The ascent (units above the base line) of characters.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmDescent">
            <summary>The descent (units below the base line) of characters.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmInternalLeading">
            <summary>The amount of leading (space) inside the bounds set by the tmHeight member.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmExternalLeading">
            <summary>The amount of extra leading (space) that the application adds between rows.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmAveCharWidth">
            <summary>The average width of characters in the font (generally defined as the width of the letter x).</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmMaxCharWidth">
            <summary>The width of the widest character in the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmWeight">
            <summary>The weight of the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmOverhang">
            <summary>The extra width per string that may be added to some synthesized fonts.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmDigitizedAspectX">
            <summary>The horizontal aspect of the device for which the font was designed.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmDigitizedAspectY">
            <summary>The vertical aspect of the device for which the font was designed.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmFirstChar">
            <summary>The value of the first character defined in the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmLastChar">
            <summary>The value of the last character defined in the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmDefaultChar">
            <summary>The value of the character to be substituted for characters not in the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmBreakChar">
            <summary>The value of the character that will be used to define word breaks for text justification.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmItalic">
            <summary>Specifies an italic font if it is nonzero.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmUnderlined">
            <summary>Specifies an underlined font if it is nonzero.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmStruckOut">
            <summary>A strikeout font if it is nonzero.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmPitchAndFamily">
            <summary>Specifies information about the pitch, the technology, and the family of a physical font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRIC.tmCharSet">
            <summary>The character set of the font.</summary>
        </member>
        <member name="T:Syroot.Windows.Gdi32.TEXTMETRICA">
            <summary>
            Represents basic information about a physical font. All sizes are specified in logical units; that is, they
            depend on the current mapping mode of the display context.
            </summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmHeight">
            <summary>The height (ascent + descent) of characters.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmAscent">
            <summary>The ascent (units above the base line) of characters.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmDescent">
            <summary>The descent (units below the base line) of characters.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmInternalLeading">
            <summary>The amount of leading (space) inside the bounds set by the tmHeight member.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmExternalLeading">
            <summary>The amount of extra leading (space) that the application adds between rows.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmAveCharWidth">
            <summary>The average width of characters in the font (generally defined as the width of the letter x).</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmMaxCharWidth">
            <summary>The width of the widest character in the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmWeight">
            <summary>The weight of the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmOverhang">
            <summary>The extra width per string that may be added to some synthesized fonts.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmDigitizedAspectX">
            <summary>The horizontal aspect of the device for which the font was designed.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmDigitizedAspectY">
            <summary>The vertical aspect of the device for which the font was designed.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmFirstChar">
            <summary>The value of the first character defined in the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmLastChar">
            <summary>The value of the last character defined in the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmDefaultChar">
            <summary>The value of the character to be substituted for characters not in the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmBreakChar">
            <summary>The value of the character that will be used to define word breaks for text justification.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmItalic">
            <summary>Specifies an italic font if it is nonzero.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmUnderlined">
            <summary>Specifies an underlined font if it is nonzero.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmStruckOut">
            <summary>A strikeout font if it is nonzero.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmPitchAndFamily">
            <summary>Specifies information about the pitch, the technology, and the family of a physical font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICA.tmCharSet">
            <summary>The character set of the font.</summary>
        </member>
        <member name="T:Syroot.Windows.Gdi32.TEXTMETRICW">
            <summary>
            Represents basic information about a physical font. All sizes are specified in logical units; that is, they
            depend on the current mapping mode of the display context.
            </summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmHeight">
            <summary>The height (ascent + descent) of characters.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmAscent">
            <summary>The ascent (units above the base line) of characters.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmDescent">
            <summary>The descent (units below the base line) of characters.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmInternalLeading">
            <summary>The amount of leading (space) inside the bounds set by the tmHeight member.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmExternalLeading">
            <summary>The amount of extra leading (space) that the application adds between rows.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmAveCharWidth">
            <summary>The average width of characters in the font (generally defined as the width of the letter x).</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmMaxCharWidth">
            <summary>The width of the widest character in the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmWeight">
            <summary>The weight of the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmOverhang">
            <summary>The extra width per string that may be added to some synthesized fonts.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmDigitizedAspectX">
            <summary>The horizontal aspect of the device for which the font was designed.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmDigitizedAspectY">
            <summary>The vertical aspect of the device for which the font was designed.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmFirstChar">
            <summary>The value of the first character defined in the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmLastChar">
            <summary>The value of the last character defined in the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmDefaultChar">
            <summary>The value of the character to be substituted for characters not in the font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmBreakChar">
            <summary>The value of the character that will be used to define word breaks for text justification.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmItalic">
            <summary>Specifies an italic font if it is nonzero.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmUnderlined">
            <summary>Specifies an underlined font if it is nonzero.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmStruckOut">
            <summary>A strikeout font if it is nonzero.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmPitchAndFamily">
            <summary>Specifies information about the pitch, the technology, and the family of a physical font.</summary>
        </member>
        <member name="F:Syroot.Windows.Gdi32.TEXTMETRICW.tmCharSet">
            <summary>The character set of the font.</summary>
        </member>
        <member name="T:Syroot.Windows.HKL">
            <summary>
            A language identifier is a standard international numeric abbreviation for the language in a country or
            geographical region. Each language has a unique language identifier (data type LANGID), a 16-bit value that
            consists of a primary language identifier and a sublanguage identifier. For details of language identifiers,
            see Language Identifier Constants and Strings.
            </summary>
        </member>
        <member name="F:Syroot.Windows.HWND.HWND_BOTTOM">
            <summary>Places the window at the bottom of the Z order.</summary>
        </member>
        <member name="F:Syroot.Windows.HWND.HWND_NOTOPMOST">
            <summary>Places the window above all non-topmost windows.</summary>
        </member>
        <member name="F:Syroot.Windows.HWND.HWND_TOP">
            <summary>Places the window at the top of the Z order.</summary>
        </member>
        <member name="F:Syroot.Windows.HWND.HWND_TOPMOST">
            <summary>Places the window above all non-topmost windows.</summary>
        </member>
        <member name="T:Syroot.Windows.Imm32">
            <summary>
            Represents definitions in the Windows Input Method Manager library as part of the WinAPI.
            </summary>
        </member>
        <member name="T:Syroot.Windows.Imm32.CandidatePosition">
            <summary>
            Special indices of a candidate list.
            </summary>
        </member>
        <member name="T:Syroot.Windows.Imm32.ImeAction">
            <summary>
            IME notification code.
            </summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeAction.NI_OPENCANDIDATE">
            <summary>An application directs the IME to open a candidate list.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeAction.NI_CLOSECANDIDATE">
            <summary>An application directs the IME to close a candidate list.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeAction.NI_SELECTCANDIDATESTR">
            <summary>An application has selected one of the candidates.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeAction.NI_CHANGECANDIDATELIST">
            <summary>An application changed the current selected candidate.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeAction.NI_COMPOSITIONSTR">
            <summary>An application directs the IME to carry out an action on the composition string.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeAction.NI_SETCANDIDATE_PAGESTART">
            <summary>The application changes the page starting index of a candidate list.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeAction.NI_SETCANDIDATE_PAGESIZE">
            <summary>The application changes the page size of a candidate list.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeAction.NI_IMEMENUSELECTED">
            <summary>An application directs the IME to allow the application to handle the specified menu.</summary>
        </member>
        <member name="T:Syroot.Windows.Imm32.ImeCompositionString">
            <summary>
            These values are used with ImmGetCompositionString and WM_IME_COMPOSITION.
            </summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeCompositionString.GCS_COMPREADSTR">
            <summary>Retrieve or update the reading string of the current composition.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeCompositionString.GCS_COMPREADATTR">
            <summary>Retrieve or update the attributes of the reading string of the current composition.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeCompositionString.GCS_COMPREADCLAUSE">
            <summary>Retrieve or update the clause information of the reading string of the composition string.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeCompositionString.GCS_COMPSTR">
            <summary>Retrieve or update the current composition string.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeCompositionString.GCS_COMPATTR">
            <summary>Retrieve or update the attribute of the composition string.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeCompositionString.GCS_COMPCLAUSE">
            <summary>Retrieve or update clause information of the composition string.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeCompositionString.GCS_CURSORPOS">
            <summary>Retrieve or update the cursor position in composition string.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeCompositionString.GCS_DELTASTART">
            <summary>Retrieve or update the starting position of any changes in composition string.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeCompositionString.GCS_RESULTREADSTR">
            <summary>Retrieve or update the reading string.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeCompositionString.GCS_RESULTREADCLAUSE">
            <summary>Retrieve or update clause information of the reading string.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeCompositionString.GCS_RESULTSTR">
            <summary>Retrieve or update the string of the composition result.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeCompositionString.GCS_RESULTCLAUSE">
            <summary>Retrieve or update clause information of the result string.</summary>
        </member>
        <member name="T:Syroot.Windows.Imm32.ImeConversionMode">
            <summary>
            Represents bit fields for conversion mode. These values are used with the ImmGetConversionStatus and
            ImmSetConversionStatus functions.
            </summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_CLOSESTATUSWINDOW">
            <summary>Notifies an application when an IME is about to close the status window.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_OPENSTATUSWINDOW">
            <summary>Notifies an application when an IME is about to create the status window.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_CHANGECANDIDATE">
            <summary>Notifies the application when an IME is about to change the content of the candidate window.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_CLOSECANDIDATE">
            <summary>Notifies an application when an IME is about to close the candidates window.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_OPENCANDIDATE">
            <summary>Notifies an application when an IME is about to open the candidate window.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_SETCONVERSIONMODE">
            <summary>Notifies an application when the conversion mode of the input context is updated.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_SETSENTENCEMODE">
            <summary>Notifies an application when the sentence mode of the input context is updated.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_SETOPENSTATUS">
            <summary>Notifies an application when the open status of the input context is updated.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_SETCANDIDATEPOS">
            <summary>Notifies an application when candidate processing has finished and the IME is about to move the
            candidate window.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_SETCOMPOSITIONFONT">
            <summary>Notifies an application when the font of the input context is updated.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_SETCOMPOSITIONWINDOW">
            <summary>Notifies an application when the style or position of the composition window is updated.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_SETSTATUSWINDOWPOS">
            <summary>Notifies an application when the status window position in the input context is updated.</summary>
        </member>
        <member name="F:Syroot.Windows.Imm32.ImeNotification.IMN_GUIDELINE">
            <summary>Notifies an application when an IME is about to show an error message or other information.</summary>
        </member>
        <member name="T:Syroot.Windows.Imm32.ImeSentenceMode">
            <summary>
            Represents bit fields for sentence mode. These values are used with the ImmGetConversionStatus and
            ImmSetConversionStatus functions.
            </summary>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmAssociateContext(Syroot.Windows.HWND,Syroot.Windows.HIMC)">
            <summary>
            Associates the specified input context with the specified window. By default, the operating system
            associates the default input context with each window as it is created.
            </summary>
            <param name="hwnd">Handle to the window to associate with the input context.</param>
            <param name="himc">Handle to the input context. If hIMC is NULL, the function removes any association the
            window has with an input context. Thus IME cannot be used in the window.</param>
            <returns>Returns the handle to the input context previously associated with the window.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmDisableTextFrameService(System.UInt32)">
            <summary>
            Disables the text service for the specified thread.
            </summary>
            <param name="idThread">Identifier of the thread for which to disable the text service.</param>
            <returns>Returns <see langword="true"/> if successful or <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmGetCompositionString(Syroot.Windows.HIMC,Syroot.Windows.Imm32.ImeCompositionString,System.IntPtr,System.UInt32)">
            <summary>
            Retrieves information about the composition string.
            </summary>
            <param name="himc">Handle to the input context.</param>
            <param name="index">Index of the information to retrieve, which is one of the values specified in
            IME Composition String Values.</param>
            <param name="lpBuf">Pointer to a buffer in which the function retrieves the composition string information.</param>
            <param name="dwBufLen">Size, in bytes, of the output buffer, even if the output is a Unicode string.</param>
            <returns>Returns the number of bytes copied to the output buffer.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmGetCandidateList(Syroot.Windows.HIMC,System.UInt32,System.IntPtr,System.UInt32)">
            <summary>
            Retrieves a candidate list.
            </summary>
            <param name="himc">Handle to the input context.</param>
            <param name="deIndex">Zero-based index of the candidate list.</param>
            <param name="lpCandList">Pointer to a CANDIDATELIST structure in which the function retrieves the candidate
            list.</param>
            <param name="dwBufLen">Size, in bytes, of the buffer to receive the candidate list. The application can
            specify 0 for this parameter if the function is to return the required size of the output buffer only.</param>
            <returns>Returns the number of bytes copied to the candidate list buffer if successful. If the application
            has supplied 0 for the dwBufLen parameter, the function returns the size required for the candidate list
            buffer.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmGetContext(Syroot.Windows.HWND)">
            <summary>
            Returns the input context associated with the specified window.
            </summary>
            <param name="hwnd">Handle to the window for which to retrieve the input context.</param>
            <returns>Returns the handle to the input context.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmGetConversionStatus(Syroot.Windows.HIMC,System.UInt32@,System.UInt32@)">
            <summary>
            Retrieves the current conversion status.
            </summary>
            <param name="himc">Handle to the input context for which to retrieve status information.</param>
            <param name="lpfdwConversion">Pointer to a variable in which the function retrieves a combination of
            conversion mode values.</param>
            <param name="lpfdwSentence">Pointer to a variable in which the function retrieves a sentence mode value.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmGetDefaultIMEWnd(Syroot.Windows.HWND)">
            <summary>
            Retrieves the default window handle to the IME class.
            </summary>
            <param name="hwnd">Handle to the window.</param>
            <returns>Returns the default window handle to the IME class if successful, or NULL otherwise.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmGetIMEFileName(Syroot.Windows.HKL,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Retrieves the file name of the IME associated with the specified input locale.
            </summary>
            <param name="hkl">Input locale identifier.</param>
            <param name="lpszFileName">Pointer to a buffer in which the function retrieves the file name. This parameter
            contains 0 when uBufLen is set to 0.</param>
            <param name="uBufLen">Size, in bytes, of the output buffer. The application specifies 0 if the function is
            to return the buffer size needed to receive the file name, not including the terminating null character. For
            Unicode, uBufLen specifies the size in Unicode characters, not including the terminating null character.</param>
            <returns>Returns the number of bytes in the file name copied to the output buffer.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmGetOpenStatus(Syroot.Windows.HIMC)">
            <summary>
            Determines whether the IME is open or closed.
            </summary>
            <param name="himc">Handle to the input context.</param>
            <returns>Returns <see langword="true"/> if the IME is open, or <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmGetVirtualKey(Syroot.Windows.HWND)">
            <summary>
            Retrieves the original virtual key value associated with a key input message that the IME has already
            processed.
            </summary>
            <param name="hwnd">Handle to the window that receives the key message.</param>
            <returns>If TranslateMessage has been called by the application, returns
            <see cref="F:Syroot.Windows.User32.VirtualKey.VK_PROCESSKEY"/>; otherwise, it returns the virtual key.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmIsIME(Syroot.Windows.HKL)">
            <summary>
            Determines if the specified input locale has an IME.
            </summary>
            <param name="hkl">Input locale identifier.</param>
            <returns>Returns <see langword="true"/> if the specified locale has an IME, or <see langword="false"/>
            otherwise.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmLockIMC(Syroot.Windows.HIMC)">
            <summary>
            This function enables an input method editor (IME) to access the INPUTCONTEXT structure for an input method
            context (IMC) by returning a pointer to the structure.
            </summary>
            <param name="himc">Handle to the IMC.</param>
            <returns>Pointer to INPUTCONTEXT indicates success. NULL indicates failure.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmLockIMCC(Syroot.Windows.HIMCC)">
            <summary>
            This function enables an input method editor (IME) to get a pointer to an input method context (IMC)
            component that can be a member of the IMC.
            </summary>
            <param name="himcc">Handle to IMC component.</param>
            <returns>Pointer to the IMC component indicates success. NULL indicates failure.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmNotifyIME(Syroot.Windows.HIMC,Syroot.Windows.Imm32.ImeAction,System.UInt32,System.UInt32)">
            <summary>
            Notifies the IME about changes to the status of the input context.
            </summary>
            <param name="himc">Handle to the input context.</param>
            <param name="dwAction">Notification code.</param>
            <param name="dwIndex">Index of a candidate list. Alternatively, if dwAction is NI_COMPOSITIONSTR, this
            parameter can have one of the following values.</param>
            <param name="dwValue">Index of a candidate string. The application can set this parameter or ignore it,
            depending on the value of the dwAction parameter.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmReleaseContext(Syroot.Windows.HWND,Syroot.Windows.HIMC)">
            <summary>
            Releases the input context and unlocks the memory associated in the input context.
            </summary>
            <param name="hwnd">Handle to the window for which the input context was previously retrieved.</param>
            <param name="himc">Handle to the input context.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmSetOpenStatus(Syroot.Windows.HIMC,System.Boolean)">
            <summary>
            Opens or closes the IME.
            </summary>
            <param name="himc">Handle to the input context.</param>
            <param name="open">TRUE if the IME is open, or FALSE if it is closed.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmSetConversionStatus(Syroot.Windows.HIMC,System.UInt32,System.UInt32)">
            <summary>
            Sets the current conversion status.
            </summary>
            <param name="himc">Handle to the input context.</param>
            <param name="p1">Conversion mode values.</param>
            <param name="p2">Conversion mode values.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmSimulateHotKey(Syroot.Windows.HWND,System.UInt32)">
            <summary>
            Simulates the specified IME hot key, causing the same response as if the user presses the hot key in the
            specified window.
            </summary>
            <param name="hwnd">Handle to the window.</param>
            <param name="hotKeyIdentifier">Identifier of the IME hot key.</param>
            <returns>Returns <see langword="true"/> if successful, or <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmUnlockIMC(Syroot.Windows.HIMC)">
            <summary>
            This function reduces the lock count for the input method context (IMC).
            </summary>
            <param name="himc">Handle to the IMC.</param>
            <returns>FALSE when the lock count of IMC is reduced to zero; otherwise, TRUE.</returns>
        </member>
        <member name="M:Syroot.Windows.Imm32.ImmUnlockIMCC(Syroot.Windows.HIMCC)">
            <summary>
            This function reduces the lock count for the input method context (IMC) component.
            </summary>
            <param name="himcc">Handle to the IMC component.</param>
            <returns>FALSE indicates that the lock count of IMC component is reduced to zero; otherwise, TRUE.</returns>
        </member>
        <member name="T:Syroot.Windows.IpHlpApi">
            <summary>
            Represents definitions in the Windows IpHlpApi library as part of the WinAPI.
            </summary>
        </member>
        <member name="M:Syroot.Windows.IpHlpApi.GetBestInterface(System.UInt32,System.UInt32@)">
            <summary>
            Retrieves the index of the interface that has the best route to the specified IPv4 address.
            </summary>
            <param name="dwDestAddr">The destination IPv4 address for which to retrieve the interface that has the best
            route, in the form of an IPAddr structure.</param>
            <param name="pdwBestIfIndex">A pointer to a DWORD variable that receives the index of the interface that has
            the best route to the IPv4 address specified by dwDestAddr.</param>
            <returns>If the function succeeds, the return value is <see cref="F:Syroot.Windows.Error.ERROR_SUCCESS"/>.</returns>
        </member>
        <member name="T:Syroot.Windows.Kernel32">
            <summary>
            Represents definitions in the Windows Kernel32 library as part of the WinAPI.
            </summary>
        </member>
        <member name="T:Syroot.Windows.Kernel32.FileSystemFlags">
            <summary>
            Represents supported features of a file system.
            </summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_CASE_SENSITIVE_SEARCH">
            <summary>The specified volume supports case-sensitive file names.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_CASE_PRESERVED_NAMES">
            <summary>The specified volume supports preserved case of file names when it places a name on disk.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_UNICODE_ON_DISK">
            <summary>The specified volume supports Unicode in file names as they appear on disk.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_PERSISTENT_ACLS">
            <summary>The specified volume preserves and enforces access control lists (ACL).</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_FILE_COMPRESSION">
            <summary>The specified volume supports file-based compression.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_VOLUME_QUOTAS">
            <summary>The specified volume supports disk quotas.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_SUPPORTS_SPARSE_FILES">
            <summary>The specified volume supports sparse files.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_SUPPORTS_REPARSE_POINTS">
            <summary>The specified volume supports reparse points.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_VOLUME_IS_COMPRESSED">
            <summary>The specified volume is a compressed volume, for example, a DoubleSpace volume.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_SUPPORTS_OBJECT_IDS">
            <summary>The specified volume supports object identifiers.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_SUPPORTS_ENCRYPTION">
            <summary>The specified volume supports the Encrypted File System (EFS).</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_NAMED_STREAMS">
            <summary>The specified volume supports named streams.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_READ_ONLY_VOLUME">
            <summary>The specified volume is read-only.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_SEQUENTIAL_WRITE_ONCE">
            <summary>The specified volume supports a single sequential write.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_SUPPORTS_TRANSACTIONS">
            <summary>The specified volume supports transactions.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_SUPPORTS_HARD_LINKS">
            <summary>The specified volume supports hard links.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_SUPPORTS_EXTENDED_ATTRIBUTES">
            <summary>The specified volume supports extended attributes.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_SUPPORTS_OPEN_BY_FILE_ID">
            <summary>The file system supports open by FileID.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_SUPPORTS_USN_JOURNAL">
            <summary>The specified volume supports update sequence number (USN) journals.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.FileSystemFlags.FILE_DAX_VOLUME">
            <summary>The specified volume is a direct access (DAX) volume.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.GlobalAllocFlags.GMEM_FIXED">
            <summary>Allocates fixed memory. The return value is a pointer.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.GlobalAllocFlags.GMEM_MOVEABLE">
            <summary>Allocates movable memory.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.GlobalAllocFlags.GMEM_ZEROINIT">
            <summary>Initializes memory contents to zero.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.GlobalAllocFlags.GPTR">
            <summary>Combines <see cref="F:Syroot.Windows.Kernel32.GlobalAllocFlags.GMEM_FIXED"/> and <see cref="F:Syroot.Windows.Kernel32.GlobalAllocFlags.GMEM_ZEROINIT"/>.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.GlobalAllocFlags.GHND">
            <summary>Combines <see cref="F:Syroot.Windows.Kernel32.GlobalAllocFlags.GMEM_MOVEABLE"/> and <see cref="F:Syroot.Windows.Kernel32.GlobalAllocFlags.GMEM_ZEROINIT"/>.</summary>
        </member>
        <member name="F:Syroot.Windows.Kernel32.MAX_PATH">
            <summary>Maximum length of a path.</summary>
        </member>
        <member name="M:Syroot.Windows.Kernel32.FreeLibrary(Syroot.Windows.HMODULE)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count. When
            the reference count reaches zero, the module is unloaded from the address space of the calling process and
            the handle is no longer valid.
            </summary>
            <param name="hLibModule">A handle to the loaded library module. The LoadLibrary, LoadLibraryEx,
            GetModuleHandle, or GetModuleHandleEx function returns this handle.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.Kernel32.GetModuleHandle(System.String)">
            <summary>
            Retrieves a module handle for the specified module.
            </summary>
            <param name="lpModuleName">The name of the loaded module (either a .dll or .exe file).</param>
            <returns>If the function succeeds, the return value is a handle to the specified module.</returns>
        </member>
        <member name="M:Syroot.Windows.Kernel32.GetProcAddress(Syroot.Windows.HMODULE,System.String)">
            <summary>
            Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
            </summary>
            <param name="hModule">A handle to the DLL module that contains the function or variable.</param>
            <param name="lpProcName">The function or variable name, or the function's ordinal value.</param>
            <returns>If the function succeeds, the return value is the address of the exported function or variable.</returns>
        </member>
        <member name="M:Syroot.Windows.Kernel32.GetVolumeInformation(System.String,System.Text.StringBuilder,System.UInt32,System.UInt32@,System.UInt32@,Syroot.Windows.Kernel32.FileSystemFlags@,System.Text.StringBuilder,System.UInt32)">
            <summary>
            Retrieves information about the file system and volume associated with the specified root directory.
            </summary>
            <param name="lpRootPathName">A pointer to a string that contains the root directory of the volume to be
            described. If this parameter is <see langword="null"/>, the root of the current directory is used. A
            trailing backslash is required.</param>
            <param name="lpVolumeNameBuffer">A pointer to a buffer that receives the name of a specified volume.</param>
            <param name="nVolumeNameSize">The length of a volume name buffer.</param>
            <param name="lpVolumeSerialNumber">A pointer to a variable that receives the volume serial number.</param>
            <param name="lpMaximumComponentLength">A pointer to a variable that receives the maximum length.</param>
            <param name="lpFileSystemFlags">A pointer to a variable that receives flags associated with the specified
            file system.</param>
            <param name="lpFileSystemNameBuffer">A pointer to a buffer that receives the name of the file system, for
            example, the FAT file system or the NTFS file system.</param>
            <param name="nFileSystemNameSize">The length of the file system name buffer.</param>
            <returns>If all the requested information is retrieved, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.Kernel32.GlobalAlloc(Syroot.Windows.Kernel32.GlobalAllocFlags,System.UInt32)">
            <summary>
            Allocates the specified number of bytes from the heap.
            </summary>
            <param name="uFlags">The memory allocation attributes.</param>
            <param name="dwBytes">The number of bytes to allocate.</param>
            <returns>If the function succeeds, the return value is a handle to the newly allocated memory object.</returns>
        </member>
        <member name="M:Syroot.Windows.Kernel32.GlobalFree(Syroot.Windows.HGLOBAL)">
            <summary>
            rees the specified global memory object and invalidates its handle.
            </summary>
            <param name="hMem">A handle to the global memory object.</param>
            <returns>If the function succeeds, the return value is NULL.</returns>
        </member>
        <member name="M:Syroot.Windows.Kernel32.GlobalLock(Syroot.Windows.HGLOBAL)">
            <summary>
            Locks a global memory object and returns a pointer to the first byte of the object's memory block.
            </summary>
            <param name="hMem">A handle to the global memory object.</param>
            <returns>If the function succeeds, the return value is a pointer to the first byte of the memory block.</returns>
        </member>
        <member name="M:Syroot.Windows.Kernel32.GlobalUnlock(Syroot.Windows.HGLOBAL)">
            <summary>
            Decrements the lock count associated with a memory object that was allocated with
            <see cref="F:Syroot.Windows.Kernel32.GlobalAllocFlags.GMEM_MOVEABLE"/>. This function has no effect on memory objects allocated with
            <see cref="F:Syroot.Windows.Kernel32.GlobalAllocFlags.GMEM_FIXED"/>.
            </summary>
            <param name="hMem">A handle to the global memory object.</param>
            <returns>If the memory object is still locked after decrementing the lock count, the return value is
            <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.Kernel32.LoadLibrary(System.String)">
            <summary>
            Loads the specified module into the address space of the calling process. The specified module may cause
            other modules to be loaded.
            </summary>
            <param name="lpLibFileName">The name of the module. This can be either a library module (a .dll file) or an
            executable module (an .exe file).</param>
            <returns>If the function succeeds, the return value is a handle to the module.</returns>
        </member>
        <member name="T:Syroot.Windows.User32">
            <summary>
            Represents definitions in the Windows User32 library as part of the WinAPI.
            </summary>
        </member>
        <member name="T:Syroot.Windows.User32.ClassStyle">
            <summary>
            Represents window class styles.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.ClassStyle.CS_VREDRAW">
            <summary>Redraws the entire window if a movement or size adjustment changes the height of the client
            area.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ClassStyle.CS_HREDRAW">
            <summary>Redraws the entire window if a movement or size adjustment changes the width of the client
            area.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ClassStyle.CS_DBLCLKS">
            <summary>Sends a double-click message to the window procedure when the user double-clicks the mouse
            while the cursor is within a window belonging to the class.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ClassStyle.CS_OWNDC">
            <summary>Allocates a unique device context for each window in the class.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ClassStyle.CS_CLASSDC">
            <summary>Allocates one device context to be shared by all windows in the class.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ClassStyle.CS_PARENTDC">
            <summary>Sets the clipping rectangle of the child window to that of the parent window so that the child
            can draw on the parent.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.ClassStyle.CS_NOCLOSE">
            <summary>Disables Close on the window menu.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ClassStyle.CS_SAVEBITS">
            <summary>Saves, as a bitmap, the portion of the screen image obscured by a window of this class.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ClassStyle.CS_BYTEALIGNCLIENT">
            <summary>Aligns the window's client area on a byte boundary (in the x direction).</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ClassStyle.CS_BYTEALIGNWINDOW">
            <summary>Aligns the window on a byte boundary (in the x direction).</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ClassStyle.CS_GLOBALCLASS">
            <summary>Indicates that the window class is an application global class.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ClassStyle.CS_DROPSHADOW">
            <summary>Enables the drop shadow effect on a window.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.ClipboardFormat">
            <summary>
            The clipboard formats defined by the system are called standard clipboard formats.
            </summary>
        </member>
        <member name="T:Syroot.Windows.User32.CursorResource">
            <summary>
            Represents named cursor resource IDs.
            </summary>
        </member>
        <member name="T:Syroot.Windows.User32.HitTest">
            <summary>
            Represents the results of a non-client area hit test.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTERROR">
            <summary>On the screen background or on a dividing line between windows (same as HTNOWHERE, except that
            the DefWindowProc function produces a system beep to indicate an error).</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTTRANSPARENT">
            <summary>In a window currently covered by another window in the same thread (the message will be sent to
            underlying windows in the same thread until one of them returns a code that is not HTTRANSPARENT).</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTNOWHERE">
            <summary>On the screen background or on a dividing line between windows.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTCLIENT">
            <summary>In a client area.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTCAPTION">
            <summary>In a title bar.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTSYSMENU">
            <summary>In a window menu or in a Close button in a child window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTGROWBOX">
            <summary>In a size box.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTSIZE">
            <summary>In a size box.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTMENU">
            <summary>In a menu.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTHSCROLL">
            <summary>In a horizontal scroll bar.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTVSCROLL">
            <summary>In the vertical scroll bar.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTMINBUTTON">
            <summary>In a Minimize button.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTREDUCE">
            <summary>In a Minimize button.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTMAXBUTTON">
            <summary>In a Maximize button.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTZOOM">
            <summary>In a Maximize button.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTLEFT">
            <summary>In the left border of a resizable window (the user can click the mouse to resize the window
            horizontally).</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTRIGHT">
            <summary>In the right border of a resizable window (the user can click the mouse to resize the window
            horizontally).</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTTOP">
            <summary>In the upper-horizontal border of a window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTTOPLEFT">
            <summary>In the upper-left corner of a window border.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTTOPRIGHT">
            <summary>In the upper-right corner of a window border.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTBOTTOM">
            <summary>In the lower-horizontal border of a resizable window (the user can click the mouse to resize
            the window vertically).
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTBOTTOMLEFT">
            <summary>In the lower-left corner of a border of a resizable window (the user can click the mouse to
            resize the window diagonally).</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTBOTTOMRIGHT">
            <summary>In the lower-right corner of a border of a resizable window (the user can click the mouse to
            resize the window diagonally).</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTBORDER">
            <summary>In the border of a window that does not have a sizing border.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTCLOSE">
            <summary>In a Close button.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.HitTest.HTHELP">
            <summary>In a Help button.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.HookCode">
            <summary>
            A code the hook procedure uses to determine how to process the message.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.HookCode.HC_ACTION">
            <summary>The wParam and lParam parameters contain information about a keyboard message.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.IconResource">
            <summary>
            Represents named icon resource IDs.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.IconResource.IDI_APPLICATION">
            <summary>Default application icon.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.IconResource.IDI_HAND">
            <summary>Hand-shaped icon. Same as <see cref="F:Syroot.Windows.User32.IconResource.IDI_ERROR"/>.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.IconResource.IDI_QUESTION">
            <summary>Question mark icon.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.IconResource.IDI_EXCLAMATION">
            <summary>Exclamation point icon. Same as <see cref="F:Syroot.Windows.User32.IconResource.IDI_WARNING"/>.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.IconResource.IDI_ASTERISK">
            <summary>Asterisk icon. Same as <see cref="F:Syroot.Windows.User32.IconResource.IDI_INFORMATION"/>.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.IconResource.IDI_WINLOGO">
            <summary>Default application icon.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.IconResource.IDI_SHIELD">
            <summary>Security shield icon.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.IconResource.IDI_WARNING">
            <summary>Exclamation point icon.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.IconResource.IDI_ERROR">
            <summary>Hand-shaped icon.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.IconResource.IDI_INFORMATION">
            <summary>Asterisk icon.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.KBDLLHOOKSTRUCT">
            <summary>
            Contains information about a low-level keyboard input event.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.KBDLLHOOKSTRUCT.vkCode">
            <summary>A virtual-key code. The code must be a value in the range 1 to 254.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.KBDLLHOOKSTRUCT.scanCode">
            <summary>A hardware scan code for the key.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.KBDLLHOOKSTRUCT.flags">
            <summary>The extended-key flag, event-injected flags, context code, and transition-state flag.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.KBDLLHOOKSTRUCT.time">
            <summary>The time stamp for this message, equivalent to what GetMessageTime would return for this
            message.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.KBDLLHOOKSTRUCT.dwExtraInfo">
            <summary>Additional information associated with the message.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.LowLevelKeyboardHookFlag">
            <summary>
            Represents low level keyboard hook flags.
            </summary>
        </member>
        <member name="T:Syroot.Windows.User32.MessageBoxResult">
            <summary>
            Represents the result of a <see cref="M:Syroot.Windows.User32.MessageBox(System.IntPtr,System.String,System.String,Syroot.Windows.User32.MessageBoxType)"/> call.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxResult.IDOK">
            <summary>The OK button was selected.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxResult.IDCANCEL">
            <summary>The Cancel button was selected.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxResult.IDABORT">
            <summary>The Abort button was selected.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxResult.IDRETRY">
            <summary>The Retry button was selected.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxResult.IDIGNORE">
            <summary>The Ignore button was selected.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxResult.IDYES">
            <summary>The Yes button was selected.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxResult.IDNO">
            <summary>The No button was selected.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxResult.IDTRYAGAIN">
            <summary>The Try Again button was selected.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxResult.IDCONTINUE">
            <summary>The Continue button was selected.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.MessageBoxType">
            <summary>
            Represents the contents and behavior of a <see cref="M:Syroot.Windows.User32.MessageBox(System.IntPtr,System.String,System.String,Syroot.Windows.User32.MessageBoxType)"/>.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_OK">
            <summary>The message box contains one push button: OK.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_OKCANCEL">
            <summary>The message box contains two push buttons: OK and Cancel.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_ABORTRETRYIGNORE">
            <summary>The message box contains three push buttons: Abort, Retry, and Ignore.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_YESNOCANCEL">
            <summary>The message box contains three push buttons: Yes, No, and Cancel.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_YESNO">
            <summary>The message box contains two push buttons: Yes and No.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_RETRYCANCEL">
            <summary>The message box contains two push buttons: Retry and Cancel.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_CANCELTRYCONTINUE">
            <summary>The message box contains three push buttons: Cancel, Try Again, Continue.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_HELP">
            <summary>Adds a Help button to the message box.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_ICONEXCLAMATION">
            <summary>An exclamation-point icon appears in the message box.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_ICONWARNING">
            <summary>An exclamation-point icon appears in the message box.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_ICONINFORMATION">
            <summary>An icon consisting of a lowercase letter i in a circle appears in the message box.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_ICONASTERISK">
            <summary>An icon consisting of a lowercase letter i in a circle appears in the message box.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_ICONQUESTION">
            <summary>A question-mark icon appears in the message box.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_ICONSTOP">
            <summary>A stop-sign icon appears in the message box.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_ICONERROR">
            <summary>A stop-sign icon appears in the message box.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_ICONHAND">
            <summary>A stop-sign icon appears in the message box.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_DEFBUTTON1">
            <summary>The first button is the default button.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_DEFBUTTON2">
            <summary>The second button is the default button.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_DEFBUTTON3">
            <summary>The third button is the default button.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_DEFBUTTON4">
            <summary>The fourth button is the default button.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_APPLMODAL">
            <summary>The user must respond to the message box before continuing work in the window identified by the
            hWnd parameter.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_SYSTEMMODAL">
            <summary>Same as MB_APPLMODAL except that the message box has the WS_EX_TOPMOST style.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_TASKMODAL">
            <summary>Same as MB_APPLMODAL except that all the top-level windows belonging to the current thread are
            disabled if the hWnd parameter is NULL.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_DEFAULT_DESKTOP_ONLY">
            <summary>Same as desktop of the interactive window station.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_RIGHT">
            <summary>The text is right-justified.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_RTLREADING">
            <summary>Displays message and caption text using right-to-left reading order on Hebrew and Arabic
            systems.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_SETFOREGROUND">
            <summary>The message box becomes the foreground window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_TOPMOST">
            <summary>The message box is created with the WS_EX_TOPMOST window style.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MessageBoxType.MB_SERVICE_NOTIFICATION">
            <summary>The caller is a service notifying the user of an event.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.MSG">
            <summary>
            Contains message information from a thread's message queue.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.MSG.hwnd">
            <summary>A handle to the window whose window procedure receives the message.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MSG.message">
            <summary>The message identifier.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MSG.wParam">
            <summary>Additional information about the message.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MSG.lParam">
            <summary>Additional information about the message.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MSG.time">
            <summary>The time at which the message was posted.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.MSG.pt">
            <summary>The cursor position, in screen coordinates, when the message was posted.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.PAINTSTRUCT">
            <summary>
            The PAINTSTRUCT structure contains information for an application. This information can be used to paint the
            client area of a window owned by that application.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.PAINTSTRUCT.hdc">
            <summary>A handle to the display DC to be used for painting.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.PAINTSTRUCT.fErase">
            <summary>Indicates whether the background must be erased.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.PAINTSTRUCT.rcPaint">
            <summary>A <see cref="T:Syroot.Windows.User32.RECT"/> structure that specifies the upper left and lower right corners of the
            rectangle in which the painting is requested, in device units relative to the upper-left corner of the
            client area.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.PAINTSTRUCT.fRestore">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.PAINTSTRUCT.fIncUpdate">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.PAINTSTRUCT.rgbReserved">
            <summary>Reserved; used internally by the system.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.PeekMessageRemove">
            <summary>
            Represents how messages are to be handled in <see cref="M:Syroot.Windows.User32.PeekMessage(Syroot.Windows.User32.MSG@,Syroot.Windows.HWND,System.UInt32,System.UInt32,Syroot.Windows.User32.PeekMessageRemove)"/>.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.PeekMessageRemove.PM_NOREMOVE">
            <summary>Messages are not removed from the queue after processing by PeekMessage.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.PeekMessageRemove.PM_REMOVE">
            <summary>Messages are removed from the queue after processing by PeekMessage.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.PeekMessageRemove.PM_NOYIELD">
            <summary>Prevents the system from releasing any thread that is waiting for the caller to go idle.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.POINT">
            <summary>
            Represents the x- and y- coordinates of a point.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.POINT.x">
            <summary>The x-coordinate of the point.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.POINT.y">
            <summary>The y-coordinate of the point.</summary>
        </member>
        <member name="M:Syroot.Windows.User32.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syroot.Windows.User32.POINT"/> struct with the given coordinates.
            </summary>
            <param name="x">The x-coordinate of the point.</param>
            <param name="y">The y-coordinate of the point.</param>
        </member>
        <member name="M:Syroot.Windows.User32.POINT.op_Implicit(System.Drawing.Point)~Syroot.Windows.User32.POINT">
            <summary>
            Implicitly converts a <see cref="T:System.Drawing.Point"/> to a <see cref="T:Syroot.Windows.User32.POINT"/> instance.
            </summary>
            <param name="point">The <see cref="T:System.Drawing.Point"/> instance to convert.</param>
        </member>
        <member name="M:Syroot.Windows.User32.POINT.op_Implicit(Syroot.Windows.User32.POINT)~System.Drawing.Point">
            <summary>
            Implicitly converts a <see cref="T:Syroot.Windows.User32.POINT"/> to a <see cref="T:System.Drawing.Point"/> instance.
            </summary>
            <param name="point">The <see cref="T:Syroot.Windows.User32.POINT"/> instance to convert.</param>
        </member>
        <member name="T:Syroot.Windows.User32.RECT">
            <summary>
            Represents the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.RECT.left">
            <summary>The x-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.RECT.top">
            <summary>The y-coordinate of the upper-left corner of the rectangle.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.RECT.right">
            <summary>The x-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.RECT.bottom">
            <summary>The y-coordinate of the lower-right corner of the rectangle.</summary>
        </member>
        <member name="M:Syroot.Windows.User32.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Syroot.Windows.User32.RECT"/> struct with the given dimensions.
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="top">The y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="right">The x-coordinate of the lower-right corner of the rectangle.</param>
            <param name="bottom">The y-coordinate of the lower-right corner of the rectangle.</param>
        </member>
        <member name="P:Syroot.Windows.User32.RECT.Width">
            <summary>
            Gets the width of the rectangle.
            </summary>
        </member>
        <member name="P:Syroot.Windows.User32.RECT.Height">
            <summary>
            Gets the height of the rectangle.
            </summary>
        </member>
        <member name="M:Syroot.Windows.User32.RECT.op_Implicit(System.Drawing.Rectangle)~Syroot.Windows.User32.RECT">
            <summary>
            Implicitly converts a <see cref="T:System.Drawing.Rectangle"/> to a <see cref="T:Syroot.Windows.User32.RECT"/> instance.
            </summary>
            <param name="rectangle">The <see cref="T:System.Drawing.Rectangle"/> instance to convert.</param>
        </member>
        <member name="M:Syroot.Windows.User32.RECT.op_Implicit(Syroot.Windows.User32.RECT)~System.Drawing.Rectangle">
            <summary>
            Implicitly converts a <see cref="T:Syroot.Windows.User32.RECT"/> to a <see cref="T:System.Drawing.Rectangle"/> instance.
            </summary>
            <param name="rect">The <see cref="T:Syroot.Windows.User32.RECT"/> instance to convert.</param>
        </member>
        <member name="T:Syroot.Windows.User32.SetWindowPosFlags">
            <summary>
            Represents the window sizing and positioning flags.
            </summary>
        </member>
        <member name="T:Syroot.Windows.User32.ShowWindowCmd">
            <summary>
            Represents <see cref="M:Syroot.Windows.User32.ShowWindow(Syroot.Windows.HWND,Syroot.Windows.User32.ShowWindowCmd)"/> commands.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_HIDE">
            <summary>Hides the window and activates another window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_SHOWNORMAL">
            <summary>Activates and displays a window. </summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_NORMAL">
            <summary>Activates and displays a window. </summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_SHOWMINIMIZED">
            <summary>Activates the window and displays it as a minimized window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_SHOWMAXIMIZED">
            <summary>Activates the window and displays it as a maximized window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_MAXIMIZE">
            <summary>Maximizes the specified window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_SHOWNOACTIVATE">
            <summary>Displays a window in its most recent size and position.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_SHOW">
            <summary>Activates the window and displays it in its current size and position.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_MINIMIZE">
            <summary>Minimizes the specified window and activates the next top-level window in the Z order.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_SHOWMINNOACTIVE">
            <summary>Displays the window as a minimized window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_SHOWNA">
            <summary>Displays the window in its current size and position.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_RESTORE">
            <summary>Activates and displays the window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_SHOWDEFAULT">
            <summary>Sets the show state based on the SW_ value specified in the STARTUPINFO structure passed to the
            CreateProcess function by the program that started the application.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.ShowWindowCmd.SW_FORCEMINIMIZE">
            <summary>Minimizes a window, even if the thread that owns the window is not responding.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.STICKYKEYS">
            <summary>
            Contains information about the StickyKeys accessibility feature.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.STICKYKEYS.cbSize">
            <summary>Specifies the size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.STICKYKEYS.dwFlags">
            <summary>A set of bit-flags that specify properties of the StickyKeys feature.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.StickyKeysFlags">
            <summary>
            Represents bit-flags that specify properties of the StickyKeys feature.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.StickyKeysFlags.SKF_AVAILABLE">
            <summary>If this flag is set, the StickyKeys feature is available.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.StickyKeysFlags.SKF_HOTKEYACTIVE">
            <summary>If this flag is set, the user can turn the StickyKeys feature on and off by pressing the SHIFT
            key five times.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.StickyKeysFlags.SKF_CONFIRMHOTKEY">
            <summary>A confirmation dialog appears when the StickyKeys feature is activated by using the hot key.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.StickyKeysFlags.SKF_HOTKEYSOUND">
            <summary>If this flag is set, the system plays a siren sound when the user turns the StickyKeys feature
            on or off by using the hot key.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.StickyKeysFlags.SKF_INDICATOR">
            <summary>A visual indicator should be displayed when the StickyKeys feature is on.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.StickyKeysFlags.SKF_AUDIBLEFEEDBACK">
            <summary>If this flag is set, the system plays a sound when the user latches, locks, or releases
            modifier keys using the StickyKeys feature.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.StickyKeysFlags.SKF_TRISTATE">
            <summary>If this flag is set, pressing a modifier key twice in a row locks down the key until the user
            presses it a third time.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.StickyKeysFlags.SKF_TWOKEYSOFF">
            <summary>If this flag is set, releasing a modifier key that has been pressed in combination with any
            other key turns off the StickyKeys feature.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.SysCommand">
            <summary>
            Represents a system command.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.SysCommand.SC_NEXTWINDOW">
            <summary>Moves to the next window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.SysCommand.SC_PREVWINDOW">
            <summary>Moves to the previous window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.SysCommand.SC_MOUSEMENU">
            <summary>Retrieves the window menu as a result of a mouse click.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.SysCommand.SC_KEYMENU">
            <summary>Retrieves the window menu as a result of a keystroke.
            </summary>
        </member>
        <member name="T:Syroot.Windows.User32.SysParameter">
            <summary>
            Represents the system-wide parameter to be retrieved or set.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.SysParameter.SPI_GETWORKAREA">
            <summary>Retrieves the size of the work area on the primary display monitor. The work area is the
            portion of the screen not obscured by the system taskbar or by application desktop toolbars.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.SysParameter.SPI_GETSTICKYKEYS">
            <summary>Retrieves information about the StickyKeys accessibility feature. The pvParam parameter must
            point to a STICKYKEYS structure that receives the information.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.SysParameter.SPI_SETSTICKYKEYS">
            <summary>Sets the parameters of the StickyKeys accessibility feature. The pvParam parameter must point
            to a STICKYKEYS structure that contains the new parameters.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.SysParameterChange">
            <summary>
            Specifies whether the user profile is to be updated, and if so, whether the WM_SETTINGCHANGE message is to
            be broadcast to all top-level windows to notify them of the change.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.SysParameterChange.None">
            <summary>Do not update the user profile or broadcast the WM_SETTINGCHANGE message.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.SysParameterChange.SPIF_UPDATEINIFILE">
            <summary>Writes the new system-wide parameter setting to the user profile.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.SysParameterChange.SPIF_SENDCHANGE">
            <summary>Broadcasts the WM_SETTINGCHANGE message after updating the user profile.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.SysParameterChange.SPIF_SENDWININICHANGE">
            <summary>Same as <see cref="F:Syroot.Windows.User32.SysParameterChange.SPIF_SENDCHANGE"/>.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.SystemMetric">
            <summary>
            The system metric or configuration setting to be retrieved.
            </summary>
        </member>
        <member name="M:Syroot.Windows.User32.AdjustWindowRect(Syroot.Windows.User32.RECT@,Syroot.Windows.User32.WindowStyle,System.Boolean)">
            <summary>
            Calculates the required size of the window rectangle, based on the desired client-rectangle size.
            </summary>
            <param name="lpRect">A pointer to a RECT structure that contains the coordinates of the top-left and
            bottom-right corners of the desired client area.</param>
            <param name="dwStyle">The window style of the window whose required size is to be calculated.</param>
            <param name="bMenu">Indicates whether the window has a menu.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.BeginPaint(Syroot.Windows.HWND,Syroot.Windows.User32.PAINTSTRUCT@)">
            <summary>
            Prepares the specified window for painting and fills a <see cref="T:Syroot.Windows.User32.PAINTSTRUCT"/> structure with information
            about the painting.
            </summary>
            <param name="hWnd">Handle to the window to be repainted.</param>
            <param name="lpPaint">Pointer to the <see cref="T:Syroot.Windows.User32.PAINTSTRUCT"/> structure that will receive painting
            information.</param>
            <returns>If the function succeeds, the return value is the handle to a display device context for the
            specified window. If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>, indicating that no
            display device context is available.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.CallNextHookEx(Syroot.Windows.HHOOK,Syroot.Windows.User32.HookCode,Syroot.Windows.User32.WindowMessage@,Syroot.Windows.User32.KBDLLHOOKSTRUCT@)">
            <summary>
            Passes the hook information to the next hook procedure in the current hook chain
            </summary>
            <param name="hhk">This parameter is ignored.</param>
            <param name="nCode">The hook code passed to the current hook procedure.</param>
            <param name="wParam">The wParam value passed to the current hook procedure.</param>
            <param name="lParam">The lParam value passed to the current hook procedure.</param>
            <returns>This value is returned by the next hook procedure in the chain.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.CallWindowProc(System.IntPtr,Syroot.Windows.HWND,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Passes message information to the specified window procedure.
            </summary>
            <param name="lpPrevWndFunc">The previous window procedure. If this value is obtained by calling the
            GetWindowLong function with the nIndex parameter set to GWL_WNDPROC or DWL_DLGPROC, it is actually either
            the address of a window or dialog box procedure, or a special internal value meaningful only to
            CallWindowProc.</param>
            <param name="hWnd">A handle to the window whose window procedure will receive the message.</param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.CloseClipboard">
            <summary>
            Closes the clipboard.
            </summary>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.CreateWindow(System.String,System.String,Syroot.Windows.User32.WindowStyle,System.Int32,System.Int32,System.Int32,System.Int32,Syroot.Windows.HWND,Syroot.Windows.HMENU,Syroot.Windows.HINSTANCE,System.IntPtr)">
            <summary>
            Creates an overlapped, pop-up, or child window.
            </summary>
            <param name="lpClassName">A null-terminated string or a class atom created by a previous call to the
            RegisterClass or <see cref="M:Syroot.Windows.User32.RegisterClassEx(Syroot.Windows.User32.WNDCLASSEX@)"/> function.</param>
            <param name="lpWindowName">The window name.</param>
            <param name="dwStyle">The style of the window being created.</param>
            <param name="x">The initial horizontal position of the window.</param>
            <param name="y">The initial vertical position of the window.</param>
            <param name="nWidth">The width, in device units, of the window.</param>
            <param name="nHeight">The height, in device units, of the window.</param>
            <param name="hWndParent">A handle to the parent or owner window of the window being created.</param>
            <param name="hMenu">A handle to a menu, or specifies a child-window identifier, depending on the window
            style.</param>
            <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
            <param name="lpParam">Pointer to a value to be passed to the window through the CREATESTRUCT structure
            (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message.</param>
        </member>
        <member name="M:Syroot.Windows.User32.CreateWindowEx(Syroot.Windows.User32.WindowStyleExtended,System.String,System.String,Syroot.Windows.User32.WindowStyle,System.Int32,System.Int32,System.Int32,System.Int32,Syroot.Windows.HWND,Syroot.Windows.HMENU,Syroot.Windows.HINSTANCE,System.IntPtr)">
            <summary>
            Creates an overlapped, pop-up, or child window with an extended window style.
            </summary>
            <param name="dwExStyle">The extended window style of the window being created.</param>
            <param name="lpClassName">A null-terminated string or a class atom created by a previous call to the
            RegisterClass or <see cref="M:Syroot.Windows.User32.RegisterClassEx(Syroot.Windows.User32.WNDCLASSEX@)"/> function.</param>
            <param name="lpWindowName">The window name.</param>
            <param name="dwStyle">The style of the window being created.</param>
            <param name="x">The initial horizontal position of the window.</param>
            <param name="y">The initial vertical position of the window.</param>
            <param name="nWidth">The width, in device units, of the window.</param>
            <param name="nHeight">The height, in device units, of the window.</param>
            <param name="hWndParent">A handle to the parent or owner window of the window being created.</param>
            <param name="hMenu">A handle to a menu, or specifies a child-window identifier, depending on the window
            style.</param>
            <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
            <param name="lpParam">Pointer to a value to be passed to the window through the CREATESTRUCT structure
            (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message.</param>
            <returns>If the function succeeds, the return value is a handle to the new window.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.DefWindowProc(Syroot.Windows.HWND,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Calls the default window procedure to provide default processing for any window messages that an application
            does not process.
            </summary>
            <param name="hWnd">A handle to the window procedure that received the message.</param>
            <param name="msg">The message.</param>
            <param name="wParam">Additional message information.</param>
            <param name="lParam">Additional message information.</param>
            <returns>The return value is the result of the message processing and depends on the message.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.DispatchMessage(Syroot.Windows.User32.MSG@)">
            <summary>
            Dispatches a message to a window procedure.
            </summary>
            <param name="lpMsg">A pointer to a structure that contains the message.</param>
            <returns>The return value specifies the value returned by the window procedure.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.DestroyWindow(Syroot.Windows.HWND)">
            <summary>
            Destroys the specified window.
            </summary>
            <param name="hWnd">A handle to the window to be destroyed.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.EmptyClipboard">
            <summary>
            Empties the clipboard and frees handles to data in the clipboard.
            </summary>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.EndPaint(Syroot.Windows.HWND,Syroot.Windows.User32.PAINTSTRUCT@)">
            <summary>
            The EndPaint function marks the end of painting in the specified window. This function is required for each
            call to the <see cref="M:Syroot.Windows.User32.BeginPaint(Syroot.Windows.HWND,Syroot.Windows.User32.PAINTSTRUCT@)"/> function, but only after painting is complete.
            </summary>
            <param name="hWnd">Handle to the window that has been repainted.</param>
            <param name="lpPaint">Pointer to a <see cref="T:Syroot.Windows.User32.PAINTSTRUCT"/> structure that contains the painting
            information retrieved by <see cref="M:Syroot.Windows.User32.BeginPaint(Syroot.Windows.HWND,Syroot.Windows.User32.PAINTSTRUCT@)"/>.</param>
            <returns>The return value is always <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.GetClientRect(Syroot.Windows.HWND,Syroot.Windows.User32.RECT@)">
            <summary>
            Retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and
            lower-right corners of the client area. Because client coordinates are relative to the upper-left corner of
            a window's client area, the coordinates of the upper-left corner are (0,0).
            </summary>
            <param name="hWnd">A handle to the window whose client coordinates are to be retrieved.</param>
            <param name="rect">A pointer to a <see cref="T:Syroot.Windows.User32.RECT"/> structure that receives the client coordinates. The
            left and top members are zero. The right and bottom members contain the width and height of the window.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.GetClipboardData(Syroot.Windows.User32.ClipboardFormat)">
            <summary>
            Retrieves data from the clipboard in a specified format.
            </summary>
            <param name="uFormat">A <see cref="T:Syroot.Windows.User32.ClipboardFormat"/>.</param>
            <returns>If the function succeeds, the return value is the handle to a clipboard object in the specified
            format.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.GetCursorPos(Syroot.Windows.User32.POINT@)">
            <summary>
            Retrieves the position of the mouse cursor, in screen coordinates.
            </summary>
            <param name="lpPoint">A pointer to a POINT structure that receives the screen coordinates of the cursor.</param>
            <returns>Returns <see langword="true"/> if successful or <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.GetDC(Syroot.Windows.HWND)">
            <summary>
            The GetDC function retrieves a handle to a device context (DC) for the client area of a specified window or
            for the entire screen.
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be retrieved. If this value is
            <see cref="F:System.IntPtr.Zero"/>, GetDC retrieves the DC for the entire screen.</param>
            <returns>If the function succeeds, the return value is a handle to the DC for the specified window's client
            area. If the function fails, the return value is <see cref="F:System.IntPtr.Zero"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.GetKeyboardLayout(System.UInt32)">
            <summary>
            Retrieves the active input locale identifier (formerly called the keyboard layout).
            </summary>
            <param name="idThread">The identifier of the thread to query, or 0 for the current thread.</param>
            <returns>The return value is the input locale identifier for the thread. The low word contains a Language
            Identifier for the input language and the high word contains a device handle to the physical layout of the
            keyboard.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.GetKeyState(Syroot.Windows.User32.VirtualKey)">
            <summary>
            Retrieves the status of the specified virtual key. The status specifies whether the key is up, down, or
            toggled (on, off—alternating each time the key is pressed). 
            </summary>
            <param name="nVirtKey">A virtual key. If the desired virtual key is a letter or digit (A through Z, a
            through z, or 0 through 9), nVirtKey must be set to the ASCII value of that character. For other keys, it
            must be a virtual-key code.</param>
            <returns>The return value specifies the status of the specified virtual key.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.GetSystemMetrics(Syroot.Windows.User32.SystemMetric)">
            <summary>
            Retrieves the specified system metric or system configuration setting.
            </summary>
            <param name="nIndex">The system metric or configuration setting to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested system metric or configuration setting.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.GetWindowLong(Syroot.Windows.HWND,Syroot.Windows.User32.WindowLongQuery)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the value at a specified
            offset into the extra window memory.
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.GetWindowRect(Syroot.Windows.HWND,Syroot.Windows.User32.RECT@)">
            <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in
            screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpRect">A pointer to a <see cref="T:Syroot.Windows.User32.RECT"/> structure that receives the screen coordinates of the
            upper-left and lower-right corners of the window.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.LoadCursor(Syroot.Windows.HINSTANCE,System.Int32)">
            <summary>
            Loads the specified cursor resource from the executable (.EXE) file associated with an application instance.
            </summary>
            <param name="hInstance">A handle to an instance of the module whose executable file contains the cursor to
            be loaded.</param>
            <param name="lpCursorName">The name of the cursor resource to be loaded.</param>
            <returns>If the function succeeds, the return value is the handle to the newly loaded cursor.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.LoadIcon(Syroot.Windows.HINSTANCE,System.Int32)">
            <summary>
            Loads the specified icon resource from the executable (.exe) file associated with an application instance.
            </summary>
            <param name="hInstance">A handle to an instance of the module whose executable file contains the icon to be
            loaded.</param>
            <param name="lpIconName">The name of the icon resource to be loaded.</param>
            <returns></returns>
        </member>
        <member name="M:Syroot.Windows.User32.MessageBox(System.IntPtr,System.String,System.String,Syroot.Windows.User32.MessageBoxType)">
            <summary>
            Displays a modal dialog box that contains a system icon, a set of buttons, and a brief application-specific
            message, such as status or error information. The message box returns an integer value that indicates which
            button the user clicked.
            </summary>
            <param name="hWnd">A handle to the owner window of the message box to be created.</param>
            <param name="lpText">The message to be displayed.</param>
            <param name="lpCaption">The dialog box title.</param>
            <param name="uType">The contents and behavior of the dialog box.</param>
            <returns></returns>
        </member>
        <member name="M:Syroot.Windows.User32.OpenClipboard(Syroot.Windows.HWND)">
            <summary>
            Opens the clipboard for examination and prevents other applications from modifying the clipboard content.
            </summary>
            <param name="hWndNewOwner">A handle to the window to be associated with the open clipboard.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.PeekMessage(Syroot.Windows.User32.MSG@,Syroot.Windows.HWND,System.UInt32,System.UInt32,Syroot.Windows.User32.PeekMessageRemove)">
            <summary>
            Dispatches incoming sent messages, checks the thread message queue for a posted message, and retrieves the
            message (if any exist).
            </summary>
            <param name="lpMsg">A pointer to an MSG structure that receives message information.</param>
            <param name="hWnd">A handle to the window whose messages are to be retrieved.</param>
            <param name="wMsgFilterMin">The value of the first message in the range of messages to be examined.</param>
            <param name="wMsgFilterMax">The value of the last message in the range of messages to be examined.</param>
            <param name="wRemoveMsg">Specifies how messages are to be handled.</param>
            <returns>If a message is available, the return value is <see langword="true"/>.</returns>
            <remarks><paramref name="lpMsg"/> must not be marked as <see langword="out"/> to prevent crashes.</remarks>
        </member>
        <member name="M:Syroot.Windows.User32.PostMessage(Syroot.Windows.HWND,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the specified window
            and returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">A handle to the window whose window procedure is to receive the message.</param>
            <param name="msg">The message to be posted.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <remarks>If the function succeeds, the return value is <see langword="true"/>.</remarks>
        </member>
        <member name="M:Syroot.Windows.User32.PostQuitMessage(System.Int32)">
            <summary>
            Indicates to the system that a thread has made a request to terminate (quit).
            </summary>
            <param name="nExitCode">The application exit code.</param>
        </member>
        <member name="M:Syroot.Windows.User32.RegisterClass(Syroot.Windows.User32.WNDCLASS@)">
            <summary>
            Registeres a window class for subsequent use in calls to the <see cref="M:Syroot.Windows.User32.CreateWindow(System.String,System.String,Syroot.Windows.User32.WindowStyle,System.Int32,System.Int32,System.Int32,System.Int32,Syroot.Windows.HWND,Syroot.Windows.HMENU,Syroot.Windows.HINSTANCE,System.IntPtr)"/> or
            <see cref="M:Syroot.Windows.User32.CreateWindowEx(Syroot.Windows.User32.WindowStyleExtended,System.String,System.String,Syroot.Windows.User32.WindowStyle,System.Int32,System.Int32,System.Int32,System.Int32,Syroot.Windows.HWND,Syroot.Windows.HMENU,Syroot.Windows.HINSTANCE,System.IntPtr)"/> function.
            </summary>
            <param name="lpwWndClass">A pointer to a <see cref="T:Syroot.Windows.User32.WNDCLASS"/> structure.</param>
            <returns>If the function succeeds, the return value is a class atom that uniquely identifies the class being
            registered.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.RegisterClassEx(Syroot.Windows.User32.WNDCLASSEX@)">
            <summary>
            Registers a window class for subsequent use in calls to the CreateWindow or <see cref="M:Syroot.Windows.User32.CreateWindowEx(Syroot.Windows.User32.WindowStyleExtended,System.String,System.String,Syroot.Windows.User32.WindowStyle,System.Int32,System.Int32,System.Int32,System.Int32,Syroot.Windows.HWND,Syroot.Windows.HMENU,Syroot.Windows.HINSTANCE,System.IntPtr)"/>
            function.
            </summary>
            <param name="lpwcx">A pointer to a <see cref="T:Syroot.Windows.User32.WNDCLASSEX"/> structure.</param>
            <returns>If the function succeeds, the return value is a class atom that uniquely identifies the class being
            registered.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.ReleaseCapture">
            <summary>
            Releases the mouse capture from a window in the current thread and restores normal mouse input processing.
            </summary>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.ReleaseDC(Syroot.Windows.HWND,Syroot.Windows.Gdi32.HDC)">
            <summary>
            Releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC
            function depends on the type of DC. It frees only common and window DCs. It has no effect on class or
            private DCs.
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be released.</param>
            <param name="hDC">A handle to the DC to be released.</param>
            <returns>The return value indicates whether the DC was released. If the DC was released, the return value is
            <c>1</c>. If the DC was not released, the return value is <c>0</c>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.ScreenToClient(Syroot.Windows.HWND,Syroot.Windows.User32.POINT@)">
            <summary>
            Converts the screen coordinates of a specified point on the screen to client-area coordinates.
            </summary>
            <param name="hWnd">A handle to the window whose client area will be used for the conversion.</param>
            <param name="lpPoint">A pointer to a POINT structure that specifies the screen coordinates to be converted.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.SendMessage(Syroot.Windows.HWND,Syroot.Windows.User32.WindowMessage,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows.
            </summary>
            <param name="hWnd">A handle to the window whose window procedure will receive the message.</param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.SendMessage(Syroot.Windows.HWND,Syroot.Windows.User32.WindowMessage,Syroot.Windows.User32.KBDLLHOOKSTRUCT@,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows.
            </summary>
            <param name="hWnd">A handle to the window whose window procedure will receive the message.</param>
            <param name="msg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.SetClipboardData(Syroot.Windows.User32.ClipboardFormat,Syroot.Windows.HANDLE)">
            <summary>
            Places data on the clipboard in a specified <see cref="T:Syroot.Windows.User32.ClipboardFormat"/>.
            </summary>
            <param name="uFormat">The <see cref="T:Syroot.Windows.User32.ClipboardFormat"/>.</param>
            <param name="hMem">A handle to the data in the specified format. </param>
            <returns>If the function succeeds, the return value is the handle to the data.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.SetCursor(System.IntPtr)">
            <summary>
            Sets the cursor shape.
            </summary>
            <param name="hCursor">A handle to the cursor.</param>
            <returns>The return value is the handle to the previous cursor, if there was one.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.SetFocus(Syroot.Windows.HWND)">
            <summary>
            Sets the keyboard focus to the specified window.
            </summary>
            <param name="hWnd">A handle to the window that will receive the keyboard input.</param>
            <returns>If the function succeeds, the return value is the handle to the window that previously had the
            keyboard focus.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.SetWindowLong(Syroot.Windows.HWND,Syroot.Windows.User32.WindowLongQuery,System.IntPtr)">
            <summary>
            Changes an attribute of the specified window.
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified offset.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.SetWindowPos(Syroot.Windows.HWND,Syroot.Windows.HWND,System.Int32,System.Int32,System.Int32,System.Int32,Syroot.Windows.User32.SetWindowPosFlags)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="hWndInsertAfter">A handle to the window to precede the positioned window in the Z order.</param>
            <param name="x">The new position of the left side of the window, in client coordinates.</param>
            <param name="y">The new position of the top of the window, in client coordinates.</param>
            <param name="cx">The new width of the window, in pixels.</param>
            <param name="cy">The new height of the window, in pixels.</param>
            <param name="uFlags">The window sizing and positioning flags.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.SetWindowsHookEx(Syroot.Windows.User32.WindowsHook,Syroot.Windows.User32.LowLevelKeyboardProc,Syroot.Windows.HINSTANCE,System.UInt32)">
            <summary>
            Installs an application-defined hook procedure into a hook chain.
            </summary>
            <param name="idHook">The type of hook procedure to be installed.</param>
            <param name="lpfn">A pointer to the hook procedure.</param>
            <param name="hmod">A handle to the DLL containing the hook procedure pointed to by the lpfn parameter.</param>
            <param name="dwThreadId">The identifier of the thread with which the hook procedure is to be associated.</param>
            <returns>If the function succeeds, the return value is the handle to the hook procedure.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.ShowCursor(System.Boolean)">
            <summary>
            Displays or hides the cursor.
            </summary>
            <param name="bShow">If bShow is <see langword="true"/>, the display count is incremented by one. If bShow is
            <see langword="false"/>, the display count is decremented by one.</param>
            <returns>The return value specifies the new display counter.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.ShowWindow(Syroot.Windows.HWND,Syroot.Windows.User32.ShowWindowCmd)">
            <summary>
            Sets the specified window's show state.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="nCmdShow">Controls how the window is to be shown.</param>
            <returns>If the window was previously visible, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.SystemParametersInfo(Syroot.Windows.User32.SysParameter,System.UInt32,Syroot.Windows.User32.RECT@,Syroot.Windows.User32.SysParameterChange)">
            <summary>
            Retrieves or sets the value of one of the system-wide parameters.
            </summary>
            <param name="uiAction">The system-wide parameter to be retrieved or set.</param>
            <param name="uiParam">A parameter whose usage and format depends on the system parameter being queried or
            set.</param>
            <param name="pvParam">A parameter whose usage and format depends on the system parameter being queried or
            set.</param>
            <param name="fWinIni">If a system parameter is being set, specifies whether the user profile is to be
            updated, and if so, whether the WM_SETTINGCHANGE message is to be broadcast to all top-level windows to
            notify them of the change.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.SystemParametersInfo(Syroot.Windows.User32.SysParameter,System.UInt32,Syroot.Windows.User32.STICKYKEYS@,Syroot.Windows.User32.SysParameterChange)">
            <summary>
            Retrieves or sets the value of one of the system-wide parameters.
            </summary>
            <param name="uiAction">The system-wide parameter to be retrieved or set.</param>
            <param name="uiParam">A parameter whose usage and format depends on the system parameter being queried or
            set.</param>
            <param name="pvParam">A parameter whose usage and format depends on the system parameter being queried or
            set.</param>
            <param name="fWinIni">If a system parameter is being set, specifies whether the user profile is to be
            updated, and if so, whether the WM_SETTINGCHANGE message is to be broadcast to all top-level windows to
            notify them of the change.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.TranslateMessage(Syroot.Windows.User32.MSG@)">
            <summary>
            Translates virtual-key messages into character messages. The character messages are posted to the calling
            thread's message queue, to be read the next time the thread calls the GetMessage or
            <see cref="M:Syroot.Windows.User32.PeekMessage(Syroot.Windows.User32.MSG@,Syroot.Windows.HWND,System.UInt32,System.UInt32,Syroot.Windows.User32.PeekMessageRemove)"/> function.
            </summary>
            <param name="lpMsg">A pointer to a <see cref="T:Syroot.Windows.User32.MSG"/> structure that contains message information retrieved
            from the calling thread's message queue.</param>
            <returns>If the message is translated (that is, a character message is posted to the thread's message
            queue), the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.UnhookWindowsHookEx(Syroot.Windows.HHOOK)">
            <summary>
            Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.
            </summary>
            <param name="hhk">A handle to the hook to be removed.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="M:Syroot.Windows.User32.UpdateWindow(Syroot.Windows.HWND)">
            <summary>
            The UpdateWindow function updates the client area of the specified window by sending a WM_PAINT message to
            the window if the window's update region is not empty.
            </summary>
            <param name="hWnd">Handle to the window to be updated.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.</returns>
        </member>
        <member name="T:Syroot.Windows.User32.LowLevelKeyboardProc">
            <summary>
            An application-defined or library-defined callback function used with the SetWindowsHookEx function. The
            system calls this function every time a new keyboard input event is about to be posted into a thread input queue.
            </summary>
            <param name="nCode">A code the hook procedure uses to determine how to process the message.</param>
            <param name="wParam">The identifier of the keyboard message.</param>
            <param name="lParam">A pointer to a KBDLLHOOKSTRUCT structure.</param>
            <returns>If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx.
            </returns>
        </member>
        <member name="T:Syroot.Windows.User32.WNDPROC">
            <summary>
            An application-defined function that processes messages sent to a window.
            </summary>
            <param name="hwnd">A handle to the window.</param>
            <param name="uMsg">The message.</param>
            <param name="wParam">Additional message information.</param>
            <param name="lParam">Additional message information.</param>
            <returns>The return value is the result of the message processing and depends on the message sent.</returns>
        </member>
        <member name="T:Syroot.Windows.User32.VirtualKey">
            <summary>
            Represents a key on the keyboard.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.VirtualKey.VK_FINAL">
            <summary>IME final mode</summary>
        </member>
        <member name="T:Syroot.Windows.User32.WindowActivateState">
            <summary>
            Represents <see cref="F:Syroot.Windows.User32.WindowMessage.WM_ACTIVATE"/> wParam state values.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowLongQuery.GWL_USERDATA">
            <summary>Sets the user data associated with the window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowLongQuery.GWL_EXSTYLE">
            <summary>Sets a new extended window style.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowLongQuery.GWL_STYLE">
            <summary>Sets a new window style.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowLongQuery.GWL_ID">
            <summary>Sets a new identifier of the child window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowLongQuery.GWL_HINSTANCE">
            <summary>Sets a new application instance handle.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowLongQuery.GWL_WNDPROC">
            <summary>Sets a new address for the window procedure.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.WindowMessage">
            <summary>
            Represents messages sent to the window loop as defined by Windows.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_NULL">
            <summary>Performs no operation.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_CREATE">
            <summary>Sent when an application requests that a window be created by calling the CreateWindowEx or
            CreateWindow function.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_DESTROY">
            <summary>Sent when a window is being destroyed.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_MOVE">
            <summary>Sent after a window has been moved.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_SIZE">
            <summary>Sent to a window after its size has changed.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_ACTIVATE">
            <summary>Sent to both the window being activated and the window being deactivated.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_SETFOCUS">
            <summary>Sent to a window after it has gained the keyboard focus.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_KILLFOCUS">
            <summary>Sent to a window immediately before it loses the keyboard focus.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_ENABLE">
            <summary>Sent when an application changes the enabled state of a window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_SETREDRAW">
            <summary>Sent to a window to allow changes in that window to be redrawn or to prevent changes in that
            window from being redrawn.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_SETTEXT">
            <summary>Sets the text of a window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_GETTEXT">
            <summary>Copies the text that corresponds to a window into a buffer provided by the caller.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_GETTEXTLENGTH">
            <summary>Determines the length, in characters, of the text associated with a window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_PAINT">
            <summary>Sent when the system or another application makes a request to paint a portion of an
            application's window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_CLOSE">
            <summary>Sent as a signal that a window or an application should terminate.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_QUIT">
            <summary>Indicates a request to terminate an application, and is generated when the application calls
            the PostQuitMessage function.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_ACTIVATEAPP">
            <summary>Sent when a window belonging to a different application than the active window is about to be
            activated.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_SETCURSOR">
            <summary>Sent to a window if the mouse causes the cursor to move within a window and mouse input is not
            captured.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_INPUTLANGCHANGE">
            <summary>Sent to the topmost affected window after an application's input language has been changed.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_DISPLAYCHANGE">
            <summary>Sent to all windows when the display resolution has changed.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_NCLBUTTONDOWN">
            <summary>Posted when the user presses the left mouse button while the cursor is within the nonclient
            area of a window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_KEYDOWN">
            <summary>Posted to the window with the keyboard focus when a nonsystem key is pressed.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_KEYUP">
            <summary>Posted to the window with the keyboard focus when a nonsystem key is released.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_CHAR">
            <summary>Posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the
            TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_IME_STARTCOMPOSITION">
            <summary>Sent immediately before the IME generates the composition string as a result of a keystroke.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_IME_ENDCOMPOSITION">
            <summary>Sent to an application when the IME ends composition.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_IME_COMPOSITION">
            <summary>Sent to an application when the IME changes composition status as a result of a keystroke.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_SYSCOMMAND">
            <summary>A window receives this message when the user chooses a command from the Window menu or when the
            user chooses the maximize button, minimize button, restore button, or close button.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_MOUSEMOVE">
            <summary>Posted to a window when the cursor moves.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_LBUTTONDOWN">
            <summary>Posted when the user presses the left mouse button while the cursor is in the client area of a
            window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_LBUTTONUP">
            <summary>Posted when the user releases the left mouse button while the cursor is in the client area of a
            window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_LBUTTONDBLCLK">
            <summary>Posted when the user double-clicks the left mouse button while the cursor is in the client area
            of a window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_RBUTTONDOWN">
            <summary>Posted when the user presses the right mouse button while the cursor is in the client area of a
            window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_RBUTTONUP">
            <summary>Posted when the user releases the right mouse button while the cursor is in the client area of
            a window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_RBUTTONDBLCLK">
            <summary>Posted when the user double-clicks the right mouse button while the cursor is in the client
            area of a window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_MBUTTONDOWN">
            <summary>Posted when the user presses the middle mouse button while the cursor is in the client area of
            a window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_MBUTTONUP">
            <summary>Posted when the user releases the middle mouse button while the cursor is in the client area of
            a window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_MOUSEWHEEL">
            <summary>Sent to the focus window when the mouse wheel is rotated.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_IME_SETCONTEXT">
            <summary>Sent to an application when a window is activated.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_IME_NOTIFY">
            <summary>Sent to an application to notify it of changes to the IME window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowMessage.WM_IME_CHAR">
            <summary>Sent to an application when the IME gets a character of the conversion result.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.WindowsHook">
            <summary>
            Represents the type of hook procedure to be installed.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowsHook.WH_KEYBOARD_LL">
            <summary>Installs a hook procedure that monitors low-level keyboard input events.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_OVERLAPPED">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_TILED">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_TABSTOP">
            <summary>The window is a control that can receive the keyboard focus when the user presses the TAB key.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_MAXIMIZEBOX">
            <summary>The window has a maximize button.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_GROUP">
            <summary>The window is the first control of a group of controls.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_MINIMIZEBOX">
            <summary>The window has a minimize button.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_THICKFRAME">
            <summary>The window has a sizing border.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_SYSMENU">
            <summary>The window has a window menu on its title bar.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_SIZEBOX">
            <summary>The window has a sizing border.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_DLGFRAME">
            <summary>The window has a border of a style typically used with dialog boxes. </summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_CAPTION">
            <summary>The window has a title bar.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_MAXIMIZE">
            <summary>The window is initially maximized.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_CLIPCHILDREN">
            <summary>Excludes the area occupied by child windows when drawing occurs within the parent window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_CLIPSIBLINGS">
            <summary>Clips child windows relative to each other.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_DISABLED">
            <summary>The window is initially disabled.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_VISIBLE">
            <summary>The window is initially visible.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_MINIMIZE">
            <summary>The window is initially minimized.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_ICONIC">
            <summary>The window is initially minimized.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_CHILD">
            <summary>The window is a child window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_CHILDWINDOW">
            <summary>The window is a child window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_POPUP">
            <summary>The window is a pop-up window</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_TILEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyle.WS_POPUPWINDOW">
            <summary>The window is a pop-up window.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.WindowStyleExtended">
            <summary>
            Represents extended window styles.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_LEFT">
            <summary>The window has generic left-aligned properties. This is the default.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_LTRREADING">
            <summary>The window text is displayed using left-to-right reading-order properties. This is the default.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_RIGHTSCROLLBAR">
            <summary>The vertical scroll bar (if present) is to the right of the client area. This is the default.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_DLGMODALFRAME">
            <summary>The window has a double border.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_NOPARENTNOTIFY">
            <summary>The child window created with this style does not send the WM_PARENTNOTIFY message to its
            parent window when it is created or destroyed.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_TOPMOST">
            <summary>The window should be placed above all non-topmost windows and should stay above them, even when
            the window is deactivated.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_ACCEPTFILES">
            <summary>The window accepts drag-drop files.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_TRANSPARENT">
            <summary>The window should not be painted until siblings beneath the window (that were created by the
            same thread) have been painted.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_MDICHILD">
            <summary>The window is a MDI child window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_TOOLWINDOW">
            <summary>The window is intended to be used as a floating toolbar.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_WINDOWEDGE">
            <summary>The window has a border with a raised edge.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_CLIENTEDGE">
            <summary>The window has a border with a sunken edge.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_CONTEXTHELP">
            <summary>The title bar of the window includes a question mark.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_RIGHT">
            <summary>The window has generic "right-aligned" properties.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_RTLREADING">
            <summary>If the shell language is Hebrew, Arabic, or another language that supports reading-order
            alignment, the window text is displayed using right-to-left reading-order properties.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_LEFTSCROLLBAR">
            <summary>If the shell language is Hebrew, Arabic, or another language that supports reading order
            alignment, the vertical scroll bar (if present) is to the left of the client area.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_CONTROLPARENT">
            <summary>The window itself contains child windows that should take part in dialog box navigation.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_STATICEDGE">
            <summary>The window has a three-dimensional border style intended to be used for items that do not
            accept user input.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_APPWINDOW">
            <summary>Forces a top-level window onto the taskbar when the window is visible.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_LAYERED">
            <summary>The window is a layered window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_NOINHERITLAYOUT">
            <summary>The window does not pass its window layout to its child windows.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_NOREDIRECTIONBITMAP">
            <summary>The window does not render to a redirection surface.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_LAYOUTRTL">
            <summary>If the shell language is Hebrew, Arabic, or another language that supports reading order
            alignment, the horizontal origin of the window is on the right edge.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_COMPOSITED">
            <summary>Paints all descendants of a window in bottom-to-top painting order using double-buffering.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_NOACTIVATE">
            <summary>A top-level window created with this style does not become the foreground window when the user
            clicks it.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WindowStyleExtended.WS_EX_PALETTEWINDOW">
            <summary>The window is palette window, which is a modeless dialog box that presents an array of
            commands.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.WNDCLASS">
            <summary>
            Contains the window class attributes that are registered by the <see cref="M:Syroot.Windows.User32.RegisterClass(Syroot.Windows.User32.WNDCLASS@)"/>
            function.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASS.style">
            <summary>The class style(s).</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASS.lpfnWndProc">
            <summary>A pointer to the window procedure.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASS.cbClsExtra">
            <summary>The number of extra bytes to allocate following the window-class structure.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASS.cbWndExtra">
            <summary>The number of extra bytes to allocate following the window instance.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASS.hInstance">
            <summary>A handle to the instance that contains the window procedure for the class.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASS.hIcon">
            <summary>A handle to the class icon.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASS.hCursor">
            <summary>A handle to the class cursor.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASS.hbrBackground">
            <summary>A handle to the class background brush.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASS.lpszMenuName">
            <summary>Pointer to a null-terminated character string that specifies the resource name of the class
            menu, as the name appears in the resource file.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASS.lpszClassName">
            <summary>A pointer to a null-terminated string or is an atom.</summary>
        </member>
        <member name="T:Syroot.Windows.User32.WNDCLASSEX">
            <summary>
            Contains window class information.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASSEX.cbSize">
            <summary>The size, in bytes, of this structure.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASSEX.style">
            <summary>The class style(s).</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASSEX.lpfnWndProc">
            <summary>A pointer to the window procedure.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASSEX.cbClsExtra">
            <summary>The number of extra bytes to allocate following the window-class structure.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASSEX.cbWndExtra">
            <summary>The number of extra bytes to allocate following the window instance.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASSEX.hInstance">
            <summary>A handle to the instance that contains the window procedure for the class.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASSEX.hIcon">
            <summary>A handle to the class icon.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASSEX.hCursor">
            <summary>A handle to the class cursor.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASSEX.hbrBackground">
            <summary>A handle to the class background brush.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASSEX.lpszMenuName">
            <summary>Pointer to a null-terminated character string that specifies the resource name of the class
            menu, as the name appears in the resource file.
            </summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASSEX.lpszClassName">
            <summary>A pointer to a null-terminated string or is an atom.</summary>
        </member>
        <member name="F:Syroot.Windows.User32.WNDCLASSEX.hIconSm">
            <summary>A handle to a small icon that is associated with the window class.</summary>
        </member>
    </members>
</doc>
